{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"examples/default/getting-started/","text":"SLO spec Generated version : \"prometheus/v1\" service : \"myservice\" labels : owner : \"myteam\" repo : \"myorg/myservice\" tier : \"2\" slos : # We allow failing (5xx and 429) 1 request every 1000 requests (99.9%). - name : \"requests-availability\" objective : 99.9 description : \"Common SLO based on availability for HTTP request responses.\" sli : events : error_query : sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[{{.window}}])) total_query : sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[{{.window}}])) alerting : name : MyServiceHighErrorRate labels : category : \"availability\" annotations : # Overwrite default Sloth SLO alert summmary on ticket and page alerts. summary : \"High error rate on 'myservice' requests responses\" page_alert : labels : severity : pageteam routing_key : myteam ticket_alert : labels : severity : \"slack\" slack_channel : \"#alerts-myteam\" --- # Code generated by Sloth (dev): https://github.com/slok/sloth. # DO NOT EDIT. groups : - name : sloth-slo-sli-recordings-myservice-requests-availability rules : - record : slo:sli_error:ratio_rate5m expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[5m]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[5m]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 5m tier : \"2\" - record : slo:sli_error:ratio_rate30m expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[30m]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[30m]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 30m tier : \"2\" - record : slo:sli_error:ratio_rate1h expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1h]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1h]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 1h tier : \"2\" - record : slo:sli_error:ratio_rate2h expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[2h]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[2h]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 2h tier : \"2\" - record : slo:sli_error:ratio_rate6h expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[6h]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[6h]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 6h tier : \"2\" - record : slo:sli_error:ratio_rate1d expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1d]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1d]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 1d tier : \"2\" - record : slo:sli_error:ratio_rate3d expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[3d]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[3d]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 3d tier : \"2\" - record : slo:sli_error:ratio_rate30d expr : | sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d]) / ignoring (sloth_window) count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d]) labels : sloth_window : 30d - name : sloth-slo-meta-recordings-myservice-requests-availability rules : - record : slo:objective:ratio expr : vector(0.9990000000000001) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : slo:error_budget:ratio expr : vector(1-0.9990000000000001) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : slo:time_period:days expr : vector(30) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : slo:current_burn_rate:ratio expr : | slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : slo:period_burn_rate:ratio expr : | slo:sli_error:ratio_rate30d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : slo:period_error_budget_remaining:ratio expr : 1 - slo:period_burn_rate:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : sloth_slo_info expr : vector(1) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_mode : cli-gen-prom sloth_objective : \"99.9\" sloth_service : myservice sloth_slo : requests-availability sloth_spec : prometheus/v1 sloth_version : dev tier : \"2\" - name : sloth-slo-alerts-myservice-requests-availability rules : - alert : MyServiceHighErrorRate expr : | ( (slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (14.4 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (14.4 * 0.0009999999999999432)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate30m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (6 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (6 * 0.0009999999999999432)) ) labels : category : availability routing_key : myteam severity : pageteam sloth_severity : page annotations : summary : High error rate on 'myservice' requests responses title : (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. - alert : MyServiceHighErrorRate expr : | ( (slo:sli_error:ratio_rate2h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (3 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (3 * 0.0009999999999999432)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (1 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate3d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (1 * 0.0009999999999999432)) ) labels : category : availability severity : slack slack_channel : '#alerts-myteam' sloth_severity : ticket annotations : summary : High error rate on 'myservice' requests responses title : (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast.","title":"Getting started"},{"location":"examples/default/home-wifi/","text":"SLO spec Generated # This example shows a real service level used in my home to have SLOs on my wifi signal. # The metrics are extracted using unifi-poller (https://github.com/unifi-poller/unifi-poller) # that gets the information from an Ubiquiti Wifi installation. # https://community.ui.com/questions/satisfaction-percentage-in-client-properties-overview/8c940637-63d0-41de-a67b-8166cdd0ed32 # # The service level has 2 SLOs based on `client_satisfaction_ratio`, this is a ratio calculated # by ubiquiti that is based on wifi drop packages, wifi signal... # We conside an SLI event the client satisfactions that currently exist, lets review the SLOs # # - `good-wifi-client-satisfaction` # - This SLO warn us that we don't have a good wifi at home. # - SLI error: We consider a bad client satisfaction (event) below 75% (0.75) # - SLO objective (95%): We are not so restrictive and we allow that that 5 of every 100 clients be below 75% # # - `risk-wifi-client-satisfaction` # - This SLO warn us that we something very bad is happenning with our home wifi. # - SLI error: We consider a bad client satisfaction (event) below 50% (0.5) # - SLO objective(99.9%): We are very restrictive and we allow that that 1 of every 1000 clients be below 50% # # `sloth generate -i ./examples/home-wifi.yml` # version : \"prometheus/v1\" service : \"home-wifi\" labels : cluster : \"valhalla\" component : \"ubiquiti\" context : \"home\" slos : - name : \"good-wifi-client-satisfaction\" objective : 95 description : \"Will warn us that we don't have a good wifi at home.\" sli : events : error_query : sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.75))[{{.window}}:]) OR on() vector(0) total_query : sum_over_time((count(unifipoller_client_satisfaction_ratio))[{{.window}}:]) alerting : name : GoodWifiClientSatisfaction page_alert : labels : severity : home ticket_alert : labels : severity : warning - name : \"risk-wifi-client-satisfaction\" objective : 99.9 description : \"Will warn us that we something very bad is happenning with our home wifi.\" sli : events : error_query : sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.5))[{{.window}}:]) OR on() vector(0) total_query : sum_over_time((count(unifipoller_client_satisfaction_ratio))[{{.window}}:]) alerting : name : RiskWifiClientSatisfaction page_alert : labels : severity : home ticket_alert : labels : severity : warning --- # Code generated by Sloth (dev): https://github.com/slok/sloth. # DO NOT EDIT. groups : - name : sloth-slo-sli-recordings-home-wifi-good-wifi-client-satisfaction rules : - record : slo:sli_error:ratio_rate5m expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.75))[5m:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[5m:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction sloth_window : 5m - record : slo:sli_error:ratio_rate30m expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.75))[30m:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[30m:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction sloth_window : 30m - record : slo:sli_error:ratio_rate1h expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.75))[1h:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[1h:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction sloth_window : 1h - record : slo:sli_error:ratio_rate2h expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.75))[2h:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[2h:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction sloth_window : 2h - record : slo:sli_error:ratio_rate6h expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.75))[6h:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[6h:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction sloth_window : 6h - record : slo:sli_error:ratio_rate1d expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.75))[1d:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[1d:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction sloth_window : 1d - record : slo:sli_error:ratio_rate3d expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.75))[3d:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[3d:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction sloth_window : 3d - record : slo:sli_error:ratio_rate30d expr : | sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"}[30d]) / ignoring (sloth_window) count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"}[30d]) labels : sloth_window : 30d - name : sloth-slo-meta-recordings-home-wifi-good-wifi-client-satisfaction rules : - record : slo:objective:ratio expr : vector(0.95) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction - record : slo:error_budget:ratio expr : vector(1-0.95) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction - record : slo:time_period:days expr : vector(30) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction - record : slo:current_burn_rate:ratio expr : | slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction - record : slo:period_burn_rate:ratio expr : | slo:sli_error:ratio_rate30d{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction - record : slo:period_error_budget_remaining:ratio expr : 1 - slo:period_burn_rate:ratio{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction - record : sloth_slo_info expr : vector(1) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_mode : cli-gen-prom sloth_objective : \"95\" sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction sloth_spec : prometheus/v1 sloth_version : dev - name : sloth-slo-alerts-home-wifi-good-wifi-client-satisfaction rules : - alert : GoodWifiClientSatisfaction expr : | ( (slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} > (14.4 * 0.05)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1h{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} > (14.4 * 0.05)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate30m{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} > (6 * 0.05)) and ignoring (sloth_window) (slo:sli_error:ratio_rate6h{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} > (6 * 0.05)) ) labels : severity : home sloth_severity : page annotations : summary : '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is over expected.' title : (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. - alert : GoodWifiClientSatisfaction expr : | ( (slo:sli_error:ratio_rate2h{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} > (3 * 0.05)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1d{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} > (3 * 0.05)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate6h{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} > (1 * 0.05)) and ignoring (sloth_window) (slo:sli_error:ratio_rate3d{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} > (1 * 0.05)) ) labels : severity : warning sloth_severity : ticket annotations : summary : '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is over expected.' title : (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. - name : sloth-slo-sli-recordings-home-wifi-risk-wifi-client-satisfaction rules : - record : slo:sli_error:ratio_rate5m expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.5))[5m:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[5m:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction sloth_window : 5m - record : slo:sli_error:ratio_rate30m expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.5))[30m:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[30m:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction sloth_window : 30m - record : slo:sli_error:ratio_rate1h expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.5))[1h:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[1h:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction sloth_window : 1h - record : slo:sli_error:ratio_rate2h expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.5))[2h:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[2h:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction sloth_window : 2h - record : slo:sli_error:ratio_rate6h expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.5))[6h:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[6h:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction sloth_window : 6h - record : slo:sli_error:ratio_rate1d expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.5))[1d:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[1d:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction sloth_window : 1d - record : slo:sli_error:ratio_rate3d expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.5))[3d:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[3d:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction sloth_window : 3d - record : slo:sli_error:ratio_rate30d expr : | sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"}[30d]) / ignoring (sloth_window) count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"}[30d]) labels : sloth_window : 30d - name : sloth-slo-meta-recordings-home-wifi-risk-wifi-client-satisfaction rules : - record : slo:objective:ratio expr : vector(0.9990000000000001) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction - record : slo:error_budget:ratio expr : vector(1-0.9990000000000001) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction - record : slo:time_period:days expr : vector(30) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction - record : slo:current_burn_rate:ratio expr : | slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction - record : slo:period_burn_rate:ratio expr : | slo:sli_error:ratio_rate30d{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction - record : slo:period_error_budget_remaining:ratio expr : 1 - slo:period_burn_rate:ratio{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction - record : sloth_slo_info expr : vector(1) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_mode : cli-gen-prom sloth_objective : \"99.9\" sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction sloth_spec : prometheus/v1 sloth_version : dev - name : sloth-slo-alerts-home-wifi-risk-wifi-client-satisfaction rules : - alert : RiskWifiClientSatisfaction expr : | ( (slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} > (14.4 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1h{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} > (14.4 * 0.0009999999999999432)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate30m{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} > (6 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate6h{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} > (6 * 0.0009999999999999432)) ) labels : severity : home sloth_severity : page annotations : summary : '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is over expected.' title : (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. - alert : RiskWifiClientSatisfaction expr : | ( (slo:sli_error:ratio_rate2h{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} > (3 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1d{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} > (3 * 0.0009999999999999432)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate6h{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} > (1 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate3d{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} > (1 * 0.0009999999999999432)) ) labels : severity : warning sloth_severity : ticket annotations : summary : '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is over expected.' title : (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast.","title":"Home WiFi"},{"location":"examples/default/kubernetes-apiserver/","text":"SLO spec Generated # This example shows a real service level used for Kubernetes Apiserver. # # The service level has 2 SLOs based on Apiserver requests/responses. # # We consider an SLI event the the requests made to the server, lets review the SLOs # # - `requests-availability` # - This SLO warn us that we are returning correctly the requests to the clients (kubectl users, controllers...). # - SLI error: We consider a bad request (event) a request with the codes >=500 or 429 # - SLO objective (99.9%): We are restrictive with this because we only allow failing a request every 1000. # # - `requests-latency` # - This SLO warn us that we apiserver responses are being slow and this will affect the clients (kubectl users, controllers...). # - SLI error: We consider a bad request (event) when the response latency is <400ms. # - SLO objective(99%): We have a relaxed objective because Kubernetes has a lot of async and eventual consistency flows. We could # create in a future another SLO that is less restrictive and use the latency of the realtime requests (e.g: kubectl). # # `sloth generate -i ./examples/kubernetes-apiserver.yml` # version : \"prometheus/v1\" service : \"k8s-apiserver\" labels : cluster : \"valhalla\" component : \"kubernetes\" slos : - name : \"requests-availability\" objective : 99.9 description : \"Warn that we are returning correctly the requests to the clients (kubectl users, controllers...).\" labels : category : availability sli : events : error_query : sum(rate(apiserver_request_total{code=~\"(5..|429)\"}[{{.window}}])) total_query : sum(rate(apiserver_request_total[{{.window}}])) alerting : name : K8sApiserverAvailabilityAlert labels : category : \"availability\" annotations : runbook : \"https://github.com/kubernetes-monitoring/kubernetes-mixin/tree/master/runbook.md#alert-name-kubeapierrorshigh\" page_alert : labels : severity : critical ticket_alert : labels : severity : warning - name : \"requests-latency\" objective : 99 description : \"Warn that we apiserver responses are being slow and this will affect the clients (kubectl users, controllers...).\" labels : category : latency sli : events : error_query : | ( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[{{.window}}])) - sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[{{.window}}])) ) total_query : sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[{{.window}}])) alerting : name : K8sApiserverLatencyAlert labels : category : \"latency\" annotations : runbook : \"https://github.com/kubernetes-monitoring/kubernetes-mixin/tree/master/runbook.md#alert-name-kubeapilatencyhigh\" page_alert : labels : severity : critical ticket_alert : labels : severity : warning --- # Code generated by Sloth (dev): https://github.com/slok/sloth. # DO NOT EDIT. groups : - name : sloth-slo-sli-recordings-k8s-apiserver-requests-availability rules : - record : slo:sli_error:ratio_rate5m expr : | (sum(rate(apiserver_request_total{code=~\"(5..|429)\"}[5m]))) / (sum(rate(apiserver_request_total[5m]))) labels : category : availability cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-availability sloth_service : k8s-apiserver sloth_slo : requests-availability sloth_window : 5m - record : slo:sli_error:ratio_rate30m expr : | (sum(rate(apiserver_request_total{code=~\"(5..|429)\"}[30m]))) / (sum(rate(apiserver_request_total[30m]))) labels : category : availability cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-availability sloth_service : k8s-apiserver sloth_slo : requests-availability sloth_window : 30m - record : slo:sli_error:ratio_rate1h expr : | (sum(rate(apiserver_request_total{code=~\"(5..|429)\"}[1h]))) / (sum(rate(apiserver_request_total[1h]))) labels : category : availability cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-availability sloth_service : k8s-apiserver sloth_slo : requests-availability sloth_window : 1h - record : slo:sli_error:ratio_rate2h expr : | (sum(rate(apiserver_request_total{code=~\"(5..|429)\"}[2h]))) / (sum(rate(apiserver_request_total[2h]))) labels : category : availability cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-availability sloth_service : k8s-apiserver sloth_slo : requests-availability sloth_window : 2h - record : slo:sli_error:ratio_rate6h expr : | (sum(rate(apiserver_request_total{code=~\"(5..|429)\"}[6h]))) / (sum(rate(apiserver_request_total[6h]))) labels : category : availability cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-availability sloth_service : k8s-apiserver sloth_slo : requests-availability sloth_window : 6h - record : slo:sli_error:ratio_rate1d expr : | (sum(rate(apiserver_request_total{code=~\"(5..|429)\"}[1d]))) / (sum(rate(apiserver_request_total[1d]))) labels : category : availability cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-availability sloth_service : k8s-apiserver sloth_slo : requests-availability sloth_window : 1d - record : slo:sli_error:ratio_rate3d expr : | (sum(rate(apiserver_request_total{code=~\"(5..|429)\"}[3d]))) / (sum(rate(apiserver_request_total[3d]))) labels : category : availability cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-availability sloth_service : k8s-apiserver sloth_slo : requests-availability sloth_window : 3d - record : slo:sli_error:ratio_rate30d expr : | sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"}[30d]) / ignoring (sloth_window) count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"}[30d]) labels : sloth_window : 30d - name : sloth-slo-meta-recordings-k8s-apiserver-requests-availability rules : - record : slo:objective:ratio expr : vector(0.9990000000000001) labels : category : availability cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-availability sloth_service : k8s-apiserver sloth_slo : requests-availability - record : slo:error_budget:ratio expr : vector(1-0.9990000000000001) labels : category : availability cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-availability sloth_service : k8s-apiserver sloth_slo : requests-availability - record : slo:time_period:days expr : vector(30) labels : category : availability cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-availability sloth_service : k8s-apiserver sloth_slo : requests-availability - record : slo:current_burn_rate:ratio expr : | slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"} labels : category : availability cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-availability sloth_service : k8s-apiserver sloth_slo : requests-availability - record : slo:period_burn_rate:ratio expr : | slo:sli_error:ratio_rate30d{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"} labels : category : availability cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-availability sloth_service : k8s-apiserver sloth_slo : requests-availability - record : slo:period_error_budget_remaining:ratio expr : 1 - slo:period_burn_rate:ratio{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"} labels : category : availability cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-availability sloth_service : k8s-apiserver sloth_slo : requests-availability - record : sloth_slo_info expr : vector(1) labels : category : availability cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-availability sloth_mode : cli-gen-prom sloth_objective : \"99.9\" sloth_service : k8s-apiserver sloth_slo : requests-availability sloth_spec : prometheus/v1 sloth_version : dev - name : sloth-slo-alerts-k8s-apiserver-requests-availability rules : - alert : K8sApiserverAvailabilityAlert expr : | ( (slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"} > (14.4 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1h{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"} > (14.4 * 0.0009999999999999432)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate30m{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"} > (6 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate6h{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"} > (6 * 0.0009999999999999432)) ) labels : category : availability severity : critical sloth_severity : page annotations : runbook : https://github.com/kubernetes-monitoring/kubernetes-mixin/tree/master/runbook.md#alert-name-kubeapierrorshigh summary : '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is over expected.' title : (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. - alert : K8sApiserverAvailabilityAlert expr : | ( (slo:sli_error:ratio_rate2h{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"} > (3 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1d{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"} > (3 * 0.0009999999999999432)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate6h{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"} > (1 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate3d{sloth_id=\"k8s-apiserver-requests-availability\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability\"} > (1 * 0.0009999999999999432)) ) labels : category : availability severity : warning sloth_severity : ticket annotations : runbook : https://github.com/kubernetes-monitoring/kubernetes-mixin/tree/master/runbook.md#alert-name-kubeapierrorshigh summary : '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is over expected.' title : (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. - name : sloth-slo-sli-recordings-k8s-apiserver-requests-latency rules : - record : slo:sli_error:ratio_rate5m expr : | (( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[5m])) - sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[5m])) ) ) / (sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[5m]))) labels : category : latency cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-latency sloth_service : k8s-apiserver sloth_slo : requests-latency sloth_window : 5m - record : slo:sli_error:ratio_rate30m expr : | (( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[30m])) - sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[30m])) ) ) / (sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[30m]))) labels : category : latency cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-latency sloth_service : k8s-apiserver sloth_slo : requests-latency sloth_window : 30m - record : slo:sli_error:ratio_rate1h expr : | (( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[1h])) - sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[1h])) ) ) / (sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[1h]))) labels : category : latency cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-latency sloth_service : k8s-apiserver sloth_slo : requests-latency sloth_window : 1h - record : slo:sli_error:ratio_rate2h expr : | (( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[2h])) - sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[2h])) ) ) / (sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[2h]))) labels : category : latency cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-latency sloth_service : k8s-apiserver sloth_slo : requests-latency sloth_window : 2h - record : slo:sli_error:ratio_rate6h expr : | (( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[6h])) - sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[6h])) ) ) / (sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[6h]))) labels : category : latency cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-latency sloth_service : k8s-apiserver sloth_slo : requests-latency sloth_window : 6h - record : slo:sli_error:ratio_rate1d expr : | (( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[1d])) - sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[1d])) ) ) / (sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[1d]))) labels : category : latency cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-latency sloth_service : k8s-apiserver sloth_slo : requests-latency sloth_window : 1d - record : slo:sli_error:ratio_rate3d expr : | (( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[3d])) - sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[3d])) ) ) / (sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[3d]))) labels : category : latency cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-latency sloth_service : k8s-apiserver sloth_slo : requests-latency sloth_window : 3d - record : slo:sli_error:ratio_rate30d expr : | sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"}[30d]) / ignoring (sloth_window) count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"}[30d]) labels : sloth_window : 30d - name : sloth-slo-meta-recordings-k8s-apiserver-requests-latency rules : - record : slo:objective:ratio expr : vector(0.99) labels : category : latency cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-latency sloth_service : k8s-apiserver sloth_slo : requests-latency - record : slo:error_budget:ratio expr : vector(1-0.99) labels : category : latency cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-latency sloth_service : k8s-apiserver sloth_slo : requests-latency - record : slo:time_period:days expr : vector(30) labels : category : latency cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-latency sloth_service : k8s-apiserver sloth_slo : requests-latency - record : slo:current_burn_rate:ratio expr : | slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"} labels : category : latency cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-latency sloth_service : k8s-apiserver sloth_slo : requests-latency - record : slo:period_burn_rate:ratio expr : | slo:sli_error:ratio_rate30d{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"} labels : category : latency cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-latency sloth_service : k8s-apiserver sloth_slo : requests-latency - record : slo:period_error_budget_remaining:ratio expr : 1 - slo:period_burn_rate:ratio{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"} labels : category : latency cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-latency sloth_service : k8s-apiserver sloth_slo : requests-latency - record : sloth_slo_info expr : vector(1) labels : category : latency cluster : valhalla cmd : examplesgen.sh component : kubernetes sloth_id : k8s-apiserver-requests-latency sloth_mode : cli-gen-prom sloth_objective : \"99\" sloth_service : k8s-apiserver sloth_slo : requests-latency sloth_spec : prometheus/v1 sloth_version : dev - name : sloth-slo-alerts-k8s-apiserver-requests-latency rules : - alert : K8sApiserverLatencyAlert expr : | ( (slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"} > (14.4 * 0.01)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1h{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"} > (14.4 * 0.01)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate30m{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"} > (6 * 0.01)) and ignoring (sloth_window) (slo:sli_error:ratio_rate6h{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"} > (6 * 0.01)) ) labels : category : latency severity : critical sloth_severity : page annotations : runbook : https://github.com/kubernetes-monitoring/kubernetes-mixin/tree/master/runbook.md#alert-name-kubeapilatencyhigh summary : '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is over expected.' title : (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. - alert : K8sApiserverLatencyAlert expr : | ( (slo:sli_error:ratio_rate2h{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"} > (3 * 0.01)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1d{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"} > (3 * 0.01)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate6h{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"} > (1 * 0.01)) and ignoring (sloth_window) (slo:sli_error:ratio_rate3d{sloth_id=\"k8s-apiserver-requests-latency\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency\"} > (1 * 0.01)) ) labels : category : latency severity : warning sloth_severity : ticket annotations : runbook : https://github.com/kubernetes-monitoring/kubernetes-mixin/tree/master/runbook.md#alert-name-kubeapilatencyhigh summary : '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is over expected.' title : (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast.","title":"Kubernetes APIserver"},{"location":"examples/default/multifile/","text":"SLO spec Generated --- version : \"prometheus/v1\" service : \"myservice\" labels : owner : \"myteam\" repo : \"myorg/myservice\" tier : \"2\" slos : # We allow failing (5xx and 429) 1 request every 1000 requests (99.9%). - name : \"requests-availability\" objective : 99.9 description : \"Common SLO based on availability for HTTP request responses.\" sli : events : error_query : sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[{{.window}}])) total_query : sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[{{.window}}])) alerting : name : MyServiceHighErrorRate labels : category : \"availability\" annotations : # Overwrite default Sloth SLO alert summmary on ticket and page alerts. summary : \"High error rate on 'myservice' requests responses\" page_alert : labels : severity : pageteam routing_key : myteam ticket_alert : labels : severity : \"slack\" slack_channel : \"#alerts-myteam\" --- version : \"prometheus/v1\" service : \"myservice2\" labels : owner : \"myteam2\" repo : \"myorg/myservice2\" tier : \"1\" slos : # We allow failing (5xx and 429) 1 request every 1000 requests (99.9%). - name : \"requests-availability\" objective : 99.99 description : \"Common SLO based on availability for HTTP request responses.\" sli : events : error_query : sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[{{.window}}])) total_query : sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[{{.window}}])) alerting : name : MyServiceHighErrorRate labels : category : \"availability\" annotations : # Overwrite default Sloth SLO alert summmary on ticket and page alerts. summary : \"High error rate on 'myservice' requests responses\" page_alert : labels : severity : pageteam routing_key : myteam ticket_alert : labels : severity : \"slack\" slack_channel : \"#alerts-myteam\" --- # Code generated by Sloth (dev): https://github.com/slok/sloth. # DO NOT EDIT. groups : - name : sloth-slo-sli-recordings-myservice-requests-availability rules : - record : slo:sli_error:ratio_rate5m expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[5m]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[5m]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 5m tier : \"2\" - record : slo:sli_error:ratio_rate30m expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[30m]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[30m]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 30m tier : \"2\" - record : slo:sli_error:ratio_rate1h expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1h]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1h]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 1h tier : \"2\" - record : slo:sli_error:ratio_rate2h expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[2h]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[2h]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 2h tier : \"2\" - record : slo:sli_error:ratio_rate6h expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[6h]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[6h]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 6h tier : \"2\" - record : slo:sli_error:ratio_rate1d expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1d]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1d]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 1d tier : \"2\" - record : slo:sli_error:ratio_rate3d expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[3d]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[3d]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 3d tier : \"2\" - record : slo:sli_error:ratio_rate30d expr : | sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d]) / ignoring (sloth_window) count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d]) labels : sloth_window : 30d - name : sloth-slo-meta-recordings-myservice-requests-availability rules : - record : slo:objective:ratio expr : vector(0.9990000000000001) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : slo:error_budget:ratio expr : vector(1-0.9990000000000001) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : slo:time_period:days expr : vector(30) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : slo:current_burn_rate:ratio expr : | slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : slo:period_burn_rate:ratio expr : | slo:sli_error:ratio_rate30d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : slo:period_error_budget_remaining:ratio expr : 1 - slo:period_burn_rate:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : sloth_slo_info expr : vector(1) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_mode : cli-gen-prom sloth_objective : \"99.9\" sloth_service : myservice sloth_slo : requests-availability sloth_spec : prometheus/v1 sloth_version : dev tier : \"2\" - name : sloth-slo-alerts-myservice-requests-availability rules : - alert : MyServiceHighErrorRate expr : | ( (slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (14.4 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (14.4 * 0.0009999999999999432)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate30m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (6 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (6 * 0.0009999999999999432)) ) labels : category : availability routing_key : myteam severity : pageteam sloth_severity : page annotations : summary : High error rate on 'myservice' requests responses title : (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. - alert : MyServiceHighErrorRate expr : | ( (slo:sli_error:ratio_rate2h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (3 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (3 * 0.0009999999999999432)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (1 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate3d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (1 * 0.0009999999999999432)) ) labels : category : availability severity : slack slack_channel : '#alerts-myteam' sloth_severity : ticket annotations : summary : High error rate on 'myservice' requests responses title : (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. --- # Code generated by Sloth (dev): https://github.com/slok/sloth. # DO NOT EDIT. groups : - name : sloth-slo-sli-recordings-myservice2-requests-availability rules : - record : slo:sli_error:ratio_rate5m expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[5m]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[5m]))) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability sloth_window : 5m tier : \"1\" - record : slo:sli_error:ratio_rate30m expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[30m]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[30m]))) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability sloth_window : 30m tier : \"1\" - record : slo:sli_error:ratio_rate1h expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1h]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1h]))) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability sloth_window : 1h tier : \"1\" - record : slo:sli_error:ratio_rate2h expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[2h]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[2h]))) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability sloth_window : 2h tier : \"1\" - record : slo:sli_error:ratio_rate6h expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[6h]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[6h]))) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability sloth_window : 6h tier : \"1\" - record : slo:sli_error:ratio_rate1d expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1d]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1d]))) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability sloth_window : 1d tier : \"1\" - record : slo:sli_error:ratio_rate3d expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[3d]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[3d]))) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability sloth_window : 3d tier : \"1\" - record : slo:sli_error:ratio_rate30d expr : | sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"}[30d]) / ignoring (sloth_window) count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"}[30d]) labels : sloth_window : 30d - name : sloth-slo-meta-recordings-myservice2-requests-availability rules : - record : slo:objective:ratio expr : vector(0.9998999999999999) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability tier : \"1\" - record : slo:error_budget:ratio expr : vector(1-0.9998999999999999) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability tier : \"1\" - record : slo:time_period:days expr : vector(30) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability tier : \"1\" - record : slo:current_burn_rate:ratio expr : | slo:sli_error:ratio_rate5m{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability tier : \"1\" - record : slo:period_burn_rate:ratio expr : | slo:sli_error:ratio_rate30d{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability tier : \"1\" - record : slo:period_error_budget_remaining:ratio expr : 1 - slo:period_burn_rate:ratio{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability tier : \"1\" - record : sloth_slo_info expr : vector(1) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_mode : cli-gen-prom sloth_objective : \"99.99\" sloth_service : myservice2 sloth_slo : requests-availability sloth_spec : prometheus/v1 sloth_version : dev tier : \"1\" - name : sloth-slo-alerts-myservice2-requests-availability rules : - alert : MyServiceHighErrorRate expr : | ( (slo:sli_error:ratio_rate5m{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} > (14.4 * 0.00010000000000005117)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1h{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} > (14.4 * 0.00010000000000005117)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate30m{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} > (6 * 0.00010000000000005117)) and ignoring (sloth_window) (slo:sli_error:ratio_rate6h{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} > (6 * 0.00010000000000005117)) ) labels : category : availability routing_key : myteam severity : pageteam sloth_severity : page annotations : summary : High error rate on 'myservice' requests responses title : (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. - alert : MyServiceHighErrorRate expr : | ( (slo:sli_error:ratio_rate2h{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} > (3 * 0.00010000000000005117)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1d{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} > (3 * 0.00010000000000005117)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate6h{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} > (1 * 0.00010000000000005117)) and ignoring (sloth_window) (slo:sli_error:ratio_rate3d{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} > (1 * 0.00010000000000005117)) ) labels : category : availability severity : slack slack_channel : '#alerts-myteam' sloth_severity : ticket annotations : summary : High error rate on 'myservice' requests responses title : (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast.","title":"Multi file"},{"location":"examples/default/no-alerts/","text":"SLO spec Generated # This example shows a simple service level by implementing a single SLO without alerts. # It disables page (critical) and ticket (warning) alerts. # The SLO SLI measures the event errors as the http request respones with the code >=500 and 429. # # `sloth generate -i ./examples/no-alerts.yml` # version : \"prometheus/v1\" service : \"myapp\" labels : owner : \"myteam\" slos : - name : \"http-availability\" objective : 99.99 description : \"Common SLO based on availability for HTTP request responses.\" sli : events : error_query : | sum( rate(http_request_duration_seconds_count{job=\"myapp\", code=~\"(5..|429)\"}[{{.window}}]) ) total_query : | sum( rate(http_request_duration_seconds_count{job=\"myapp\"}[{{.window}}]) ) alerting : page_alert : disable : true ticket_alert : disable : true --- # Code generated by Sloth (dev): https://github.com/slok/sloth. # DO NOT EDIT. groups : - name : sloth-slo-sli-recordings-myapp-http-availability rules : - record : slo:sli_error:ratio_rate5m expr : | (sum( rate(http_request_duration_seconds_count{job=\"myapp\", code=~\"(5..|429)\"}[5m]) ) ) / (sum( rate(http_request_duration_seconds_count{job=\"myapp\"}[5m]) ) ) labels : cmd : examplesgen.sh owner : myteam sloth_id : myapp-http-availability sloth_service : myapp sloth_slo : http-availability sloth_window : 5m - record : slo:sli_error:ratio_rate30m expr : | (sum( rate(http_request_duration_seconds_count{job=\"myapp\", code=~\"(5..|429)\"}[30m]) ) ) / (sum( rate(http_request_duration_seconds_count{job=\"myapp\"}[30m]) ) ) labels : cmd : examplesgen.sh owner : myteam sloth_id : myapp-http-availability sloth_service : myapp sloth_slo : http-availability sloth_window : 30m - record : slo:sli_error:ratio_rate1h expr : | (sum( rate(http_request_duration_seconds_count{job=\"myapp\", code=~\"(5..|429)\"}[1h]) ) ) / (sum( rate(http_request_duration_seconds_count{job=\"myapp\"}[1h]) ) ) labels : cmd : examplesgen.sh owner : myteam sloth_id : myapp-http-availability sloth_service : myapp sloth_slo : http-availability sloth_window : 1h - record : slo:sli_error:ratio_rate2h expr : | (sum( rate(http_request_duration_seconds_count{job=\"myapp\", code=~\"(5..|429)\"}[2h]) ) ) / (sum( rate(http_request_duration_seconds_count{job=\"myapp\"}[2h]) ) ) labels : cmd : examplesgen.sh owner : myteam sloth_id : myapp-http-availability sloth_service : myapp sloth_slo : http-availability sloth_window : 2h - record : slo:sli_error:ratio_rate6h expr : | (sum( rate(http_request_duration_seconds_count{job=\"myapp\", code=~\"(5..|429)\"}[6h]) ) ) / (sum( rate(http_request_duration_seconds_count{job=\"myapp\"}[6h]) ) ) labels : cmd : examplesgen.sh owner : myteam sloth_id : myapp-http-availability sloth_service : myapp sloth_slo : http-availability sloth_window : 6h - record : slo:sli_error:ratio_rate1d expr : | (sum( rate(http_request_duration_seconds_count{job=\"myapp\", code=~\"(5..|429)\"}[1d]) ) ) / (sum( rate(http_request_duration_seconds_count{job=\"myapp\"}[1d]) ) ) labels : cmd : examplesgen.sh owner : myteam sloth_id : myapp-http-availability sloth_service : myapp sloth_slo : http-availability sloth_window : 1d - record : slo:sli_error:ratio_rate3d expr : | (sum( rate(http_request_duration_seconds_count{job=\"myapp\", code=~\"(5..|429)\"}[3d]) ) ) / (sum( rate(http_request_duration_seconds_count{job=\"myapp\"}[3d]) ) ) labels : cmd : examplesgen.sh owner : myteam sloth_id : myapp-http-availability sloth_service : myapp sloth_slo : http-availability sloth_window : 3d - record : slo:sli_error:ratio_rate30d expr : | sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myapp-http-availability\", sloth_service=\"myapp\", sloth_slo=\"http-availability\"}[30d]) / ignoring (sloth_window) count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myapp-http-availability\", sloth_service=\"myapp\", sloth_slo=\"http-availability\"}[30d]) labels : sloth_window : 30d - name : sloth-slo-meta-recordings-myapp-http-availability rules : - record : slo:objective:ratio expr : vector(0.9998999999999999) labels : cmd : examplesgen.sh owner : myteam sloth_id : myapp-http-availability sloth_service : myapp sloth_slo : http-availability - record : slo:error_budget:ratio expr : vector(1-0.9998999999999999) labels : cmd : examplesgen.sh owner : myteam sloth_id : myapp-http-availability sloth_service : myapp sloth_slo : http-availability - record : slo:time_period:days expr : vector(30) labels : cmd : examplesgen.sh owner : myteam sloth_id : myapp-http-availability sloth_service : myapp sloth_slo : http-availability - record : slo:current_burn_rate:ratio expr : | slo:sli_error:ratio_rate5m{sloth_id=\"myapp-http-availability\", sloth_service=\"myapp\", sloth_slo=\"http-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"myapp-http-availability\", sloth_service=\"myapp\", sloth_slo=\"http-availability\"} labels : cmd : examplesgen.sh owner : myteam sloth_id : myapp-http-availability sloth_service : myapp sloth_slo : http-availability - record : slo:period_burn_rate:ratio expr : | slo:sli_error:ratio_rate30d{sloth_id=\"myapp-http-availability\", sloth_service=\"myapp\", sloth_slo=\"http-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"myapp-http-availability\", sloth_service=\"myapp\", sloth_slo=\"http-availability\"} labels : cmd : examplesgen.sh owner : myteam sloth_id : myapp-http-availability sloth_service : myapp sloth_slo : http-availability - record : slo:period_error_budget_remaining:ratio expr : 1 - slo:period_burn_rate:ratio{sloth_id=\"myapp-http-availability\", sloth_service=\"myapp\", sloth_slo=\"http-availability\"} labels : cmd : examplesgen.sh owner : myteam sloth_id : myapp-http-availability sloth_service : myapp sloth_slo : http-availability - record : sloth_slo_info expr : vector(1) labels : cmd : examplesgen.sh owner : myteam sloth_id : myapp-http-availability sloth_mode : cli-gen-prom sloth_objective : \"99.99\" sloth_service : myapp sloth_slo : http-availability sloth_spec : prometheus/v1 sloth_version : dev","title":"No alerts"},{"location":"examples/default/raw-sli/","text":"SLO spec Generated # This example shows another less accurate or simpler way of creating the home wifi SLO. # # The metrics already give us a metric in ratio for each wifi connection satisfaction, instead of getting # good and bad events as connection with a minimum satisfaction ratio, we will calculate the averate of all # ratio satisfaction connections over the time window. # So we can't use the `events` SLI because we are not going to divide bad and total events. # # - `wifi-client-satisfaction` # - This SLO warn us that we have an average wifi connection satisfaction. # - SLI error: Calculated internally by ubiquitis metrics, we use directly the ratio. # - SLO objective (95%): We allow the average wifi connection satisfaction is >=95% # # `sloth generate -i ./examples/raw-home-wifi.yml` # version : \"prometheus/v1\" service : \"home-wifi\" labels : cluster : \"valhalla\" component : \"ubiquiti\" context : \"home\" slos : - name : \"wifi-client-satisfaction\" objective : 95 description : \"Warn us that we have an average wifi connection satisfaction.\" sli : raw : # Get the averate satisfaction ratio and rest 1 (max good) to get the error ratio. error_ratio_query : | 1 - ( sum(sum_over_time(unifipoller_client_satisfaction_ratio[{{.window}}])) / sum(count_over_time(unifipoller_client_satisfaction_ratio[{{.window}}])) ) alerting : name : WifiClientSatisfaction page_alert : labels : severity : home ticket_alert : labels : severity : warning --- # Code generated by Sloth (dev): https://github.com/slok/sloth. # DO NOT EDIT. groups : - name : sloth-slo-sli-recordings-home-wifi-wifi-client-satisfaction rules : - record : slo:sli_error:ratio_rate5m expr : |- (1 - ( sum(sum_over_time(unifipoller_client_satisfaction_ratio[5m])) / sum(count_over_time(unifipoller_client_satisfaction_ratio[5m])) ) ) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : wifi-client-satisfaction sloth_window : 5m - record : slo:sli_error:ratio_rate30m expr : |- (1 - ( sum(sum_over_time(unifipoller_client_satisfaction_ratio[30m])) / sum(count_over_time(unifipoller_client_satisfaction_ratio[30m])) ) ) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : wifi-client-satisfaction sloth_window : 30m - record : slo:sli_error:ratio_rate1h expr : |- (1 - ( sum(sum_over_time(unifipoller_client_satisfaction_ratio[1h])) / sum(count_over_time(unifipoller_client_satisfaction_ratio[1h])) ) ) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : wifi-client-satisfaction sloth_window : 1h - record : slo:sli_error:ratio_rate2h expr : |- (1 - ( sum(sum_over_time(unifipoller_client_satisfaction_ratio[2h])) / sum(count_over_time(unifipoller_client_satisfaction_ratio[2h])) ) ) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : wifi-client-satisfaction sloth_window : 2h - record : slo:sli_error:ratio_rate6h expr : |- (1 - ( sum(sum_over_time(unifipoller_client_satisfaction_ratio[6h])) / sum(count_over_time(unifipoller_client_satisfaction_ratio[6h])) ) ) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : wifi-client-satisfaction sloth_window : 6h - record : slo:sli_error:ratio_rate1d expr : |- (1 - ( sum(sum_over_time(unifipoller_client_satisfaction_ratio[1d])) / sum(count_over_time(unifipoller_client_satisfaction_ratio[1d])) ) ) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : wifi-client-satisfaction sloth_window : 1d - record : slo:sli_error:ratio_rate3d expr : |- (1 - ( sum(sum_over_time(unifipoller_client_satisfaction_ratio[3d])) / sum(count_over_time(unifipoller_client_satisfaction_ratio[3d])) ) ) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : wifi-client-satisfaction sloth_window : 3d - record : slo:sli_error:ratio_rate30d expr : | sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"}[30d]) / ignoring (sloth_window) count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"}[30d]) labels : sloth_window : 30d - name : sloth-slo-meta-recordings-home-wifi-wifi-client-satisfaction rules : - record : slo:objective:ratio expr : vector(0.95) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : wifi-client-satisfaction - record : slo:error_budget:ratio expr : vector(1-0.95) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : wifi-client-satisfaction - record : slo:time_period:days expr : vector(30) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : wifi-client-satisfaction - record : slo:current_burn_rate:ratio expr : | slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"} labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : wifi-client-satisfaction - record : slo:period_burn_rate:ratio expr : | slo:sli_error:ratio_rate30d{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"} labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : wifi-client-satisfaction - record : slo:period_error_budget_remaining:ratio expr : 1 - slo:period_burn_rate:ratio{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"} labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : wifi-client-satisfaction - record : sloth_slo_info expr : vector(1) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-wifi-client-satisfaction sloth_mode : cli-gen-prom sloth_objective : \"95\" sloth_service : home-wifi sloth_slo : wifi-client-satisfaction sloth_spec : prometheus/v1 sloth_version : dev - name : sloth-slo-alerts-home-wifi-wifi-client-satisfaction rules : - alert : WifiClientSatisfaction expr : | ( (slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"} > (14.4 * 0.05)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1h{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"} > (14.4 * 0.05)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate30m{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"} > (6 * 0.05)) and ignoring (sloth_window) (slo:sli_error:ratio_rate6h{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"} > (6 * 0.05)) ) labels : severity : home sloth_severity : page annotations : summary : '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is over expected.' title : (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. - alert : WifiClientSatisfaction expr : | ( (slo:sli_error:ratio_rate2h{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"} > (3 * 0.05)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1d{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"} > (3 * 0.05)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate6h{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"} > (1 * 0.05)) and ignoring (sloth_window) (slo:sli_error:ratio_rate3d{sloth_id=\"home-wifi-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"wifi-client-satisfaction\"} > (1 * 0.05)) ) labels : severity : warning sloth_severity : ticket annotations : summary : '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is over expected.' title : (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast.","title":"Raw SLI"},{"location":"examples/default/sli-plugin/","text":"SLO spec Generated SLI Plugin version : \"prometheus/v1\" service : \"myservice\" labels : owner : \"myteam\" repo : \"myorg/myservice\" tier : \"2\" slos : # We allow failing (5xx and 429) 1 request every 1000 requests (99.9%). - name : \"requests-availability\" objective : 99.9 description : \"Common SLO based on availability for HTTP request responses.\" sli : plugin : id : \"getting_started_availability\" options : job : \"myservice\" filter : 'f1=\"v1\",f2=\"v2\"' alerting : name : MyServiceHighErrorRate labels : category : \"availability\" annotations : # Overwrite default Sloth SLO alert summmary on ticket and page alerts. summary : \"High error rate on 'myservice' requests responses\" page_alert : labels : severity : pageteam routing_key : myteam ticket_alert : labels : severity : \"slack\" slack_channel : \"#alerts-myteam\" --- # Code generated by Sloth (dev): https://github.com/slok/sloth. # DO NOT EDIT. groups : - name : sloth-slo-sli-recordings-myservice-requests-availability rules : - record : slo:sli_error:ratio_rate5m expr : |- ( sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[5m])) / sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[5m]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 5m tier : \"2\" - record : slo:sli_error:ratio_rate30m expr : |- ( sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[30m])) / sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[30m]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 30m tier : \"2\" - record : slo:sli_error:ratio_rate1h expr : |- ( sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[1h])) / sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[1h]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 1h tier : \"2\" - record : slo:sli_error:ratio_rate2h expr : |- ( sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[2h])) / sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[2h]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 2h tier : \"2\" - record : slo:sli_error:ratio_rate6h expr : |- ( sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[6h])) / sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[6h]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 6h tier : \"2\" - record : slo:sli_error:ratio_rate1d expr : |- ( sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[1d])) / sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[1d]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 1d tier : \"2\" - record : slo:sli_error:ratio_rate3d expr : |- ( sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[3d])) / sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[3d]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 3d tier : \"2\" - record : slo:sli_error:ratio_rate30d expr : | sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d]) / ignoring (sloth_window) count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d]) labels : sloth_window : 30d - name : sloth-slo-meta-recordings-myservice-requests-availability rules : - record : slo:objective:ratio expr : vector(0.9990000000000001) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : slo:error_budget:ratio expr : vector(1-0.9990000000000001) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : slo:time_period:days expr : vector(30) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : slo:current_burn_rate:ratio expr : | slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : slo:period_burn_rate:ratio expr : | slo:sli_error:ratio_rate30d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : slo:period_error_budget_remaining:ratio expr : 1 - slo:period_burn_rate:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : sloth_slo_info expr : vector(1) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_mode : cli-gen-prom sloth_objective : \"99.9\" sloth_service : myservice sloth_slo : requests-availability sloth_spec : prometheus/v1 sloth_version : dev tier : \"2\" - name : sloth-slo-alerts-myservice-requests-availability rules : - alert : MyServiceHighErrorRate expr : | ( (slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (14.4 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (14.4 * 0.0009999999999999432)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate30m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (6 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (6 * 0.0009999999999999432)) ) labels : category : availability routing_key : myteam severity : pageteam sloth_severity : page annotations : summary : High error rate on 'myservice' requests responses title : (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. - alert : MyServiceHighErrorRate expr : | ( (slo:sli_error:ratio_rate2h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (3 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (3 * 0.0009999999999999432)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (1 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate3d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (1 * 0.0009999999999999432)) ) labels : category : availability severity : slack slack_channel : '#alerts-myteam' sloth_severity : ticket annotations : summary : High error rate on 'myservice' requests responses title : (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. package availability import ( \"bytes\" \"context\" \"fmt\" \"regexp\" \"strings\" \"text/template\" ) const ( SLIPluginVersion = \"prometheus/v1\" SLIPluginID = \"getting_started_availability\" ) var queryTpl = template . Must ( template . New ( \"\" ). Parse ( ` sum(rate(http_request_duration_seconds_count{ {{.filter}}job=\"{{.job}}\",code=~\"(5..|429)\" }[{{\"{{.window}}\"}}])) / sum(rate(http_request_duration_seconds_count{ {{.filter}}job=\"{{.job}}\" }[{{\"{{.window}}\"}}]))` )) var filterRegex = regexp . MustCompile ( `([^=]+=\"[^=,\"]+\",)+` ) // SLIPlugin is the getting started plugin example. // // It will return an Sloth error ratio raw query that returns the error ratio of HTTP requests based // on the HTTP response status code, taking 5xx and 429 as error events. func SLIPlugin ( ctx context . Context , meta , labels , options map [ string ] string ) ( string , error ) { // Get job. job , ok := options [ \"job\" ] if ! ok { return \"\" , fmt . Errorf ( \"job options is required\" ) } // Validate labels. err := validateLabels ( labels , \"owner\" , \"tier\" ) if err != nil { return \"\" , fmt . Errorf ( \"invalid labels: %w\" , err ) } // Sanitize filter. filter := options [ \"filter\" ] if filter != \"\" { filter = strings . Trim ( filter , \"{}\" ) filter = strings . Trim ( filter , \",\" ) filter = filter + \",\" match := filterRegex . MatchString ( filter ) if ! match { return \"\" , fmt . Errorf ( \"invalid prometheus filter: %s\" , filter ) } } // Create query. var b bytes . Buffer data := map [ string ] string { \"job\" : job , \"filter\" : filter , } err = queryTpl . Execute ( & b , data ) if err != nil { return \"\" , fmt . Errorf ( \"could not execute template: %w\" , err ) } return b . String (), nil } // validateLabels will check the labels exist. func validateLabels ( labels map [ string ] string , requiredKeys ... string ) error { for _ , k := range requiredKeys { v , ok := labels [ k ] if ! ok || ( ok && v == \"\" ) { return fmt . Errorf ( \"%q label is required\" , k ) } } return nil }","title":"SLI plugin"},{"location":"examples/kubernetes/getting-started/","text":"SLO spec Generated # This example shows the same example as getting-started.yml but using Sloth Kubernetes CRD. # It will generate the Prometheus rules in a Kubernetes prometheus-operator PrometheusRules CRD. # # `sloth generate -i ./examples/k8s-getting-started.yml` # apiVersion : sloth.slok.dev/v1 kind : PrometheusServiceLevel metadata : name : sloth-slo-my-service namespace : monitoring spec : service : \"myservice\" labels : owner : \"myteam\" repo : \"myorg/myservice\" tier : \"2\" slos : - name : \"requests-availability\" objective : 99.9 description : \"Common SLO based on availability for HTTP request responses.\" sli : events : errorQuery : sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[{{.window}}])) totalQuery : sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[{{.window}}])) alerting : name : MyServiceHighErrorRate labels : category : \"availability\" annotations : summary : \"High error rate on 'myservice' requests responses\" pageAlert : labels : severity : pageteam routing_key : myteam ticketAlert : labels : severity : \"slack\" slack_channel : \"#alerts-myteam\" --- # Code generated by Sloth (dev): https://github.com/slok/sloth. # DO NOT EDIT. apiVersion : monitoring.coreos.com/v1 kind : PrometheusRule metadata : creationTimestamp : null labels : app.kubernetes.io/component : SLO app.kubernetes.io/managed-by : sloth name : sloth-slo-my-service namespace : monitoring spec : groups : - name : sloth-slo-sli-recordings-myservice-requests-availability rules : - expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[5m]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[5m]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 5m tier : \"2\" record : slo:sli_error:ratio_rate5m - expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[30m]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[30m]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 30m tier : \"2\" record : slo:sli_error:ratio_rate30m - expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1h]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1h]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 1h tier : \"2\" record : slo:sli_error:ratio_rate1h - expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[2h]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[2h]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 2h tier : \"2\" record : slo:sli_error:ratio_rate2h - expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[6h]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[6h]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 6h tier : \"2\" record : slo:sli_error:ratio_rate6h - expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1d]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1d]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 1d tier : \"2\" record : slo:sli_error:ratio_rate1d - expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[3d]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[3d]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 3d tier : \"2\" record : slo:sli_error:ratio_rate3d - expr : | sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d]) / ignoring (sloth_window) count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d]) labels : sloth_window : 30d record : slo:sli_error:ratio_rate30d - name : sloth-slo-meta-recordings-myservice-requests-availability rules : - expr : vector(0.9990000000000001) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" record : slo:objective:ratio - expr : vector(1-0.9990000000000001) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" record : slo:error_budget:ratio - expr : vector(30) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" record : slo:time_period:days - expr : | slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" record : slo:current_burn_rate:ratio - expr : | slo:sli_error:ratio_rate30d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" record : slo:period_burn_rate:ratio - expr : 1 - slo:period_burn_rate:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" record : slo:period_error_budget_remaining:ratio - expr : vector(1) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_mode : cli-gen-k8s sloth_objective : \"99.9\" sloth_service : myservice sloth_slo : requests-availability sloth_spec : sloth.slok.dev/v1 sloth_version : dev tier : \"2\" record : sloth_slo_info - name : sloth-slo-alerts-myservice-requests-availability rules : - alert : MyServiceHighErrorRate annotations : summary : High error rate on 'myservice' requests responses title : (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. expr : | ( (slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (14.4 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (14.4 * 0.0009999999999999432)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate30m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (6 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (6 * 0.0009999999999999432)) ) labels : category : availability routing_key : myteam severity : pageteam sloth_severity : page - alert : MyServiceHighErrorRate annotations : summary : High error rate on 'myservice' requests responses title : (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. expr : | ( (slo:sli_error:ratio_rate2h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (3 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (3 * 0.0009999999999999432)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (1 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate3d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (1 * 0.0009999999999999432)) ) labels : category : availability severity : slack slack_channel : '#alerts-myteam' sloth_severity : ticket","title":"Getting started"},{"location":"examples/kubernetes/home-wifi/","text":"SLO spec Generated # This example shows the same example as home-wifi.yml but using Sloth Kubernetes CRD. # It will generate the Prometheus rules in a Kubernetes prometheus-operator PrometheusRules CRD. # # `sloth generate -i ./examples/k8s-home-wifi.yml` # apiVersion : sloth.slok.dev/v1 kind : PrometheusServiceLevel metadata : name : sloth-slo-home-wifi namespace : monitoring labels : prometheus : prometheus role : alert-rules app : sloth spec : service : \"home-wifi\" labels : cluster : \"valhalla\" component : \"ubiquiti\" context : \"home\" slos : - name : \"good-wifi-client-satisfaction\" objective : 95 description : \"Will warn us that we don't have a good wifi at home.\" sli : events : errorQuery : sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.75))[{{.window}}:]) OR on() vector(0) totalQuery : sum_over_time((count(unifipoller_client_satisfaction_ratio))[{{.window}}:]) alerting : name : GoodWifiClientSatisfaction pageAlert : labels : severity : home ticketAlert : labels : severity : warning - name : \"risk-wifi-client-satisfaction\" objective : 99.9 description : \"Will warn us that we something very bad is happenning with our home wifi.\" sli : events : errorQuery : sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.5))[{{.window}}:]) OR on() vector(0) totalQuery : sum_over_time((count(unifipoller_client_satisfaction_ratio))[{{.window}}:]) alerting : name : RiskWifiClientSatisfaction pageAlert : labels : severity : home ticketAlert : labels : severity : warning --- # Code generated by Sloth (dev): https://github.com/slok/sloth. # DO NOT EDIT. apiVersion : monitoring.coreos.com/v1 kind : PrometheusRule metadata : creationTimestamp : null labels : app : sloth app.kubernetes.io/component : SLO app.kubernetes.io/managed-by : sloth prometheus : prometheus role : alert-rules name : sloth-slo-home-wifi namespace : monitoring spec : groups : - name : sloth-slo-sli-recordings-home-wifi-good-wifi-client-satisfaction rules : - expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.75))[5m:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[5m:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction sloth_window : 5m record : slo:sli_error:ratio_rate5m - expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.75))[30m:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[30m:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction sloth_window : 30m record : slo:sli_error:ratio_rate30m - expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.75))[1h:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[1h:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction sloth_window : 1h record : slo:sli_error:ratio_rate1h - expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.75))[2h:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[2h:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction sloth_window : 2h record : slo:sli_error:ratio_rate2h - expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.75))[6h:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[6h:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction sloth_window : 6h record : slo:sli_error:ratio_rate6h - expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.75))[1d:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[1d:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction sloth_window : 1d record : slo:sli_error:ratio_rate1d - expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.75))[3d:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[3d:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction sloth_window : 3d record : slo:sli_error:ratio_rate3d - expr : | sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"}[30d]) / ignoring (sloth_window) count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"}[30d]) labels : sloth_window : 30d record : slo:sli_error:ratio_rate30d - name : sloth-slo-meta-recordings-home-wifi-good-wifi-client-satisfaction rules : - expr : vector(0.95) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction record : slo:objective:ratio - expr : vector(1-0.95) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction record : slo:error_budget:ratio - expr : vector(30) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction record : slo:time_period:days - expr : | slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction record : slo:current_burn_rate:ratio - expr : | slo:sli_error:ratio_rate30d{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction record : slo:period_burn_rate:ratio - expr : 1 - slo:period_burn_rate:ratio{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction record : slo:period_error_budget_remaining:ratio - expr : vector(1) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-good-wifi-client-satisfaction sloth_mode : cli-gen-k8s sloth_objective : \"95\" sloth_service : home-wifi sloth_slo : good-wifi-client-satisfaction sloth_spec : sloth.slok.dev/v1 sloth_version : dev record : sloth_slo_info - name : sloth-slo-alerts-home-wifi-good-wifi-client-satisfaction rules : - alert : GoodWifiClientSatisfaction annotations : summary : '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is over expected.' title : (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. expr : | ( (slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} > (14.4 * 0.05)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1h{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} > (14.4 * 0.05)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate30m{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} > (6 * 0.05)) and ignoring (sloth_window) (slo:sli_error:ratio_rate6h{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} > (6 * 0.05)) ) labels : severity : home sloth_severity : page - alert : GoodWifiClientSatisfaction annotations : summary : '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is over expected.' title : (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. expr : | ( (slo:sli_error:ratio_rate2h{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} > (3 * 0.05)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1d{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} > (3 * 0.05)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate6h{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} > (1 * 0.05)) and ignoring (sloth_window) (slo:sli_error:ratio_rate3d{sloth_id=\"home-wifi-good-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"good-wifi-client-satisfaction\"} > (1 * 0.05)) ) labels : severity : warning sloth_severity : ticket - name : sloth-slo-sli-recordings-home-wifi-risk-wifi-client-satisfaction rules : - expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.5))[5m:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[5m:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction sloth_window : 5m record : slo:sli_error:ratio_rate5m - expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.5))[30m:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[30m:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction sloth_window : 30m record : slo:sli_error:ratio_rate30m - expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.5))[1h:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[1h:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction sloth_window : 1h record : slo:sli_error:ratio_rate1h - expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.5))[2h:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[2h:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction sloth_window : 2h record : slo:sli_error:ratio_rate2h - expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.5))[6h:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[6h:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction sloth_window : 6h record : slo:sli_error:ratio_rate6h - expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.5))[1d:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[1d:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction sloth_window : 1d record : slo:sli_error:ratio_rate1d - expr : | (sum_over_time((count(unifipoller_client_satisfaction_ratio < 0.5))[3d:]) OR on() vector(0)) / (sum_over_time((count(unifipoller_client_satisfaction_ratio))[3d:])) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction sloth_window : 3d record : slo:sli_error:ratio_rate3d - expr : | sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"}[30d]) / ignoring (sloth_window) count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"}[30d]) labels : sloth_window : 30d record : slo:sli_error:ratio_rate30d - name : sloth-slo-meta-recordings-home-wifi-risk-wifi-client-satisfaction rules : - expr : vector(0.9990000000000001) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction record : slo:objective:ratio - expr : vector(1-0.9990000000000001) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction record : slo:error_budget:ratio - expr : vector(30) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction record : slo:time_period:days - expr : | slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction record : slo:current_burn_rate:ratio - expr : | slo:sli_error:ratio_rate30d{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction record : slo:period_burn_rate:ratio - expr : 1 - slo:period_burn_rate:ratio{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction record : slo:period_error_budget_remaining:ratio - expr : vector(1) labels : cluster : valhalla cmd : examplesgen.sh component : ubiquiti context : home sloth_id : home-wifi-risk-wifi-client-satisfaction sloth_mode : cli-gen-k8s sloth_objective : \"99.9\" sloth_service : home-wifi sloth_slo : risk-wifi-client-satisfaction sloth_spec : sloth.slok.dev/v1 sloth_version : dev record : sloth_slo_info - name : sloth-slo-alerts-home-wifi-risk-wifi-client-satisfaction rules : - alert : RiskWifiClientSatisfaction annotations : summary : '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is over expected.' title : (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. expr : | ( (slo:sli_error:ratio_rate5m{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} > (14.4 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1h{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} > (14.4 * 0.0009999999999999432)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate30m{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} > (6 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate6h{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} > (6 * 0.0009999999999999432)) ) labels : severity : home sloth_severity : page - alert : RiskWifiClientSatisfaction annotations : summary : '{{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is over expected.' title : (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. expr : | ( (slo:sli_error:ratio_rate2h{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} > (3 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1d{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} > (3 * 0.0009999999999999432)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate6h{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} > (1 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate3d{sloth_id=\"home-wifi-risk-wifi-client-satisfaction\", sloth_service=\"home-wifi\", sloth_slo=\"risk-wifi-client-satisfaction\"} > (1 * 0.0009999999999999432)) ) labels : severity : warning sloth_severity : ticket","title":"Home WiFi"},{"location":"examples/kubernetes/multifile/","text":"SLO spec Generated --- # This example shows the same example as getting-started.yml but using Sloth Kubernetes CRD and multifile. # It will generate the Prometheus rules in a Kubernetes prometheus-operator PrometheusRules CRD. # # `sloth generate -i ./examples/k8s-multifile.yml` # apiVersion : sloth.slok.dev/v1 kind : PrometheusServiceLevel metadata : name : sloth-slo-my-service namespace : monitoring spec : service : \"myservice\" labels : owner : \"myteam\" repo : \"myorg/myservice\" tier : \"2\" slos : - name : \"requests-availability\" objective : 99.9 description : \"Common SLO based on availability for HTTP request responses.\" sli : events : errorQuery : sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[{{.window}}])) totalQuery : sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[{{.window}}])) alerting : name : MyServiceHighErrorRate labels : category : \"availability\" annotations : summary : \"High error rate on 'myservice' requests responses\" pageAlert : labels : severity : pageteam routing_key : myteam ticketAlert : labels : severity : \"slack\" slack_channel : \"#alerts-myteam\" --- apiVersion : sloth.slok.dev/v1 kind : PrometheusServiceLevel metadata : name : sloth-slo-my-service2 namespace : monitoring spec : service : \"myservice2\" labels : owner : \"myteam2\" repo : \"myorg/myservice2\" tier : \"1\" slos : - name : \"requests-availability\" objective : 99.99 description : \"Common SLO based on availability for HTTP request responses.\" sli : events : errorQuery : sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[{{.window}}])) totalQuery : sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[{{.window}}])) alerting : name : MyServiceHighErrorRate labels : category : \"availability\" annotations : summary : \"High error rate on 'myservice' requests responses\" pageAlert : labels : severity : pageteam routing_key : myteam ticketAlert : labels : severity : \"slack\" slack_channel : \"#alerts-myteam\" --- # Code generated by Sloth (dev): https://github.com/slok/sloth. # DO NOT EDIT. apiVersion : monitoring.coreos.com/v1 kind : PrometheusRule metadata : creationTimestamp : null labels : app.kubernetes.io/component : SLO app.kubernetes.io/managed-by : sloth name : sloth-slo-my-service namespace : monitoring spec : groups : - name : sloth-slo-sli-recordings-myservice-requests-availability rules : - expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[5m]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[5m]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 5m tier : \"2\" record : slo:sli_error:ratio_rate5m - expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[30m]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[30m]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 30m tier : \"2\" record : slo:sli_error:ratio_rate30m - expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1h]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1h]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 1h tier : \"2\" record : slo:sli_error:ratio_rate1h - expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[2h]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[2h]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 2h tier : \"2\" record : slo:sli_error:ratio_rate2h - expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[6h]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[6h]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 6h tier : \"2\" record : slo:sli_error:ratio_rate6h - expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1d]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1d]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 1d tier : \"2\" record : slo:sli_error:ratio_rate1d - expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[3d]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[3d]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 3d tier : \"2\" record : slo:sli_error:ratio_rate3d - expr : | sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d]) / ignoring (sloth_window) count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d]) labels : sloth_window : 30d record : slo:sli_error:ratio_rate30d - name : sloth-slo-meta-recordings-myservice-requests-availability rules : - expr : vector(0.9990000000000001) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" record : slo:objective:ratio - expr : vector(1-0.9990000000000001) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" record : slo:error_budget:ratio - expr : vector(30) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" record : slo:time_period:days - expr : | slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" record : slo:current_burn_rate:ratio - expr : | slo:sli_error:ratio_rate30d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" record : slo:period_burn_rate:ratio - expr : 1 - slo:period_burn_rate:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" record : slo:period_error_budget_remaining:ratio - expr : vector(1) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_mode : cli-gen-k8s sloth_objective : \"99.9\" sloth_service : myservice sloth_slo : requests-availability sloth_spec : sloth.slok.dev/v1 sloth_version : dev tier : \"2\" record : sloth_slo_info - name : sloth-slo-alerts-myservice-requests-availability rules : - alert : MyServiceHighErrorRate annotations : summary : High error rate on 'myservice' requests responses title : (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. expr : | ( (slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (14.4 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (14.4 * 0.0009999999999999432)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate30m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (6 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (6 * 0.0009999999999999432)) ) labels : category : availability routing_key : myteam severity : pageteam sloth_severity : page - alert : MyServiceHighErrorRate annotations : summary : High error rate on 'myservice' requests responses title : (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. expr : | ( (slo:sli_error:ratio_rate2h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (3 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (3 * 0.0009999999999999432)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (1 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate3d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (1 * 0.0009999999999999432)) ) labels : category : availability severity : slack slack_channel : '#alerts-myteam' sloth_severity : ticket --- # Code generated by Sloth (dev): https://github.com/slok/sloth. # DO NOT EDIT. apiVersion : monitoring.coreos.com/v1 kind : PrometheusRule metadata : creationTimestamp : null labels : app.kubernetes.io/component : SLO app.kubernetes.io/managed-by : sloth name : sloth-slo-my-service2 namespace : monitoring spec : groups : - name : sloth-slo-sli-recordings-myservice2-requests-availability rules : - expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[5m]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[5m]))) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability sloth_window : 5m tier : \"1\" record : slo:sli_error:ratio_rate5m - expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[30m]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[30m]))) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability sloth_window : 30m tier : \"1\" record : slo:sli_error:ratio_rate30m - expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1h]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1h]))) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability sloth_window : 1h tier : \"1\" record : slo:sli_error:ratio_rate1h - expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[2h]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[2h]))) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability sloth_window : 2h tier : \"1\" record : slo:sli_error:ratio_rate2h - expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[6h]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[6h]))) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability sloth_window : 6h tier : \"1\" record : slo:sli_error:ratio_rate6h - expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1d]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1d]))) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability sloth_window : 1d tier : \"1\" record : slo:sli_error:ratio_rate1d - expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[3d]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[3d]))) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability sloth_window : 3d tier : \"1\" record : slo:sli_error:ratio_rate3d - expr : | sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"}[30d]) / ignoring (sloth_window) count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"}[30d]) labels : sloth_window : 30d record : slo:sli_error:ratio_rate30d - name : sloth-slo-meta-recordings-myservice2-requests-availability rules : - expr : vector(0.9998999999999999) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability tier : \"1\" record : slo:objective:ratio - expr : vector(1-0.9998999999999999) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability tier : \"1\" record : slo:error_budget:ratio - expr : vector(30) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability tier : \"1\" record : slo:time_period:days - expr : | slo:sli_error:ratio_rate5m{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability tier : \"1\" record : slo:current_burn_rate:ratio - expr : | slo:sli_error:ratio_rate30d{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability tier : \"1\" record : slo:period_burn_rate:ratio - expr : 1 - slo:period_burn_rate:ratio{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_service : myservice2 sloth_slo : requests-availability tier : \"1\" record : slo:period_error_budget_remaining:ratio - expr : vector(1) labels : cmd : examplesgen.sh owner : myteam2 repo : myorg/myservice2 sloth_id : myservice2-requests-availability sloth_mode : cli-gen-k8s sloth_objective : \"99.99\" sloth_service : myservice2 sloth_slo : requests-availability sloth_spec : sloth.slok.dev/v1 sloth_version : dev tier : \"1\" record : sloth_slo_info - name : sloth-slo-alerts-myservice2-requests-availability rules : - alert : MyServiceHighErrorRate annotations : summary : High error rate on 'myservice' requests responses title : (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. expr : | ( (slo:sli_error:ratio_rate5m{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} > (14.4 * 0.00010000000000005117)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1h{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} > (14.4 * 0.00010000000000005117)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate30m{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} > (6 * 0.00010000000000005117)) and ignoring (sloth_window) (slo:sli_error:ratio_rate6h{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} > (6 * 0.00010000000000005117)) ) labels : category : availability routing_key : myteam severity : pageteam sloth_severity : page - alert : MyServiceHighErrorRate annotations : summary : High error rate on 'myservice' requests responses title : (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. expr : | ( (slo:sli_error:ratio_rate2h{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} > (3 * 0.00010000000000005117)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1d{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} > (3 * 0.00010000000000005117)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate6h{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} > (1 * 0.00010000000000005117)) and ignoring (sloth_window) (slo:sli_error:ratio_rate3d{sloth_id=\"myservice2-requests-availability\", sloth_service=\"myservice2\", sloth_slo=\"requests-availability\"} > (1 * 0.00010000000000005117)) ) labels : category : availability severity : slack slack_channel : '#alerts-myteam' sloth_severity : ticket","title":"Multi file"},{"location":"examples/kubernetes/sli-plugin/","text":"SLO spec Generated SLI Plugin # This example shows the same example as home-wifi.yml but using Sloth Kubernetes CRD. # It will generate the Prometheus rules in a Kubernetes prometheus-operator PrometheusRules CRD. # # `sloth generate -i ./examples/plugin-k8s-home-wifi.yml` -p ./examples # apiVersion : sloth.slok.dev/v1 kind : PrometheusServiceLevel metadata : name : sloth-slo-home-wifi namespace : monitoring labels : prometheus : prometheus role : alert-rules app : sloth spec : service : \"myservice\" labels : owner : \"myteam\" repo : \"myorg/myservice\" tier : \"2\" slos : # We allow failing (5xx and 429) 1 request every 1000 requests (99.9%). - name : \"requests-availability\" objective : 99.9 description : \"Common SLO based on availability for HTTP request responses.\" sli : plugin : id : \"getting_started_availability\" options : job : \"myservice\" filter : 'f1=\"v1\",f2=\"v2\"' alerting : name : MyServiceHighErrorRate labels : category : \"availability\" annotations : # Overwrite default Sloth SLO alert summmary on ticket and page alerts. summary : \"High error rate on 'myservice' requests responses\" page_alert : labels : severity : pageteam routing_key : myteam ticket_alert : labels : severity : \"slack\" slack_channel : \"#alerts-myteam\" --- # Code generated by Sloth (dev): https://github.com/slok/sloth. # DO NOT EDIT. apiVersion : monitoring.coreos.com/v1 kind : PrometheusRule metadata : creationTimestamp : null labels : app : sloth app.kubernetes.io/component : SLO app.kubernetes.io/managed-by : sloth prometheus : prometheus role : alert-rules name : sloth-slo-home-wifi namespace : monitoring spec : groups : - name : sloth-slo-sli-recordings-myservice-requests-availability rules : - expr : |- ( sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[5m])) / sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[5m]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 5m tier : \"2\" record : slo:sli_error:ratio_rate5m - expr : |- ( sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[30m])) / sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[30m]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 30m tier : \"2\" record : slo:sli_error:ratio_rate30m - expr : |- ( sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[1h])) / sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[1h]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 1h tier : \"2\" record : slo:sli_error:ratio_rate1h - expr : |- ( sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[2h])) / sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[2h]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 2h tier : \"2\" record : slo:sli_error:ratio_rate2h - expr : |- ( sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[6h])) / sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[6h]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 6h tier : \"2\" record : slo:sli_error:ratio_rate6h - expr : |- ( sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[1d])) / sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[1d]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 1d tier : \"2\" record : slo:sli_error:ratio_rate1d - expr : |- ( sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\",code=~\"(5..|429)\" }[3d])) / sum(rate(http_request_duration_seconds_count{ f1=\"v1\",f2=\"v2\",job=\"myservice\" }[3d]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 3d tier : \"2\" record : slo:sli_error:ratio_rate3d - expr : | sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d]) / ignoring (sloth_window) count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d]) labels : sloth_window : 30d record : slo:sli_error:ratio_rate30d - name : sloth-slo-meta-recordings-myservice-requests-availability rules : - expr : vector(0.9990000000000001) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" record : slo:objective:ratio - expr : vector(1-0.9990000000000001) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" record : slo:error_budget:ratio - expr : vector(30) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" record : slo:time_period:days - expr : | slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" record : slo:current_burn_rate:ratio - expr : | slo:sli_error:ratio_rate30d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" record : slo:period_burn_rate:ratio - expr : 1 - slo:period_burn_rate:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" record : slo:period_error_budget_remaining:ratio - expr : vector(1) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_mode : cli-gen-k8s sloth_objective : \"99.9\" sloth_service : myservice sloth_slo : requests-availability sloth_spec : sloth.slok.dev/v1 sloth_version : dev tier : \"2\" record : sloth_slo_info - name : sloth-slo-alerts-myservice-requests-availability rules : - alert : MyServiceHighErrorRate annotations : summary : High error rate on 'myservice' requests responses title : (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. expr : | ( (slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (14.4 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (14.4 * 0.0009999999999999432)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate30m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (6 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (6 * 0.0009999999999999432)) ) labels : category : availability sloth_severity : page - alert : MyServiceHighErrorRate annotations : summary : High error rate on 'myservice' requests responses title : (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. expr : | ( (slo:sli_error:ratio_rate2h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (3 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (3 * 0.0009999999999999432)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (1 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate3d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (1 * 0.0009999999999999432)) ) labels : category : availability sloth_severity : ticket package availability import ( \"bytes\" \"context\" \"fmt\" \"regexp\" \"strings\" \"text/template\" ) const ( SLIPluginVersion = \"prometheus/v1\" SLIPluginID = \"getting_started_availability\" ) var queryTpl = template . Must ( template . New ( \"\" ). Parse ( ` sum(rate(http_request_duration_seconds_count{ {{.filter}}job=\"{{.job}}\",code=~\"(5..|429)\" }[{{\"{{.window}}\"}}])) / sum(rate(http_request_duration_seconds_count{ {{.filter}}job=\"{{.job}}\" }[{{\"{{.window}}\"}}]))` )) var filterRegex = regexp . MustCompile ( `([^=]+=\"[^=,\"]+\",)+` ) // SLIPlugin is the getting started plugin example. // // It will return an Sloth error ratio raw query that returns the error ratio of HTTP requests based // on the HTTP response status code, taking 5xx and 429 as error events. func SLIPlugin ( ctx context . Context , meta , labels , options map [ string ] string ) ( string , error ) { // Get job. job , ok := options [ \"job\" ] if ! ok { return \"\" , fmt . Errorf ( \"job options is required\" ) } // Validate labels. err := validateLabels ( labels , \"owner\" , \"tier\" ) if err != nil { return \"\" , fmt . Errorf ( \"invalid labels: %w\" , err ) } // Sanitize filter. filter := options [ \"filter\" ] if filter != \"\" { filter = strings . Trim ( filter , \"{}\" ) filter = strings . Trim ( filter , \",\" ) filter = filter + \",\" match := filterRegex . MatchString ( filter ) if ! match { return \"\" , fmt . Errorf ( \"invalid prometheus filter: %s\" , filter ) } } // Create query. var b bytes . Buffer data := map [ string ] string { \"job\" : job , \"filter\" : filter , } err = queryTpl . Execute ( & b , data ) if err != nil { return \"\" , fmt . Errorf ( \"could not execute template: %w\" , err ) } return b . String (), nil } // validateLabels will check the labels exist. func validateLabels ( labels map [ string ] string , requiredKeys ... string ) error { for _ , k := range requiredKeys { v , ok := labels [ k ] if ! ok || ( ok && v == \"\" ) { return fmt . Errorf ( \"%q label is required\" , k ) } } return nil }","title":"SLI plugin"},{"location":"examples/openslo/getting-started/","text":"SLO spec Generated # This example shows the same example as getting-started.yml but using OpenSLO spec. # It will generate the Prometheus rules in a Prometheus rules format. # # `sloth generate -i ./examples/openslo-getting-started.yml` # apiVersion : openslo/v1alpha kind : SLO metadata : name : sloth-slo-my-service displayName : Requests Availability spec : service : my-service description : \"Common SLO based on availability for HTTP request responses.\" budgetingMethod : Occurrences objectives : - ratioMetrics : good : source : prometheus queryType : promql query : sum(rate(http_request_duration_seconds_count{job=\"myservice\",code!~\"(5..|429)\"}[{{.window}}])) total : source : prometheus queryType : promql query : sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[{{.window}}])) target : 0.999 timeWindows : - count : 30 unit : Day --- # Code generated by Sloth (dev): https://github.com/slok/sloth. # DO NOT EDIT. groups : - name : sloth-slo-sli-recordings-my-service-sloth-slo-my-service-0 rules : - record : slo:sli_error:ratio_rate5m expr : |- ( 1 - ( ( sum(rate(http_request_duration_seconds_count{job=\"myservice\",code!~\"(5..|429)\"}[5m])) ) / ( sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[5m])) ) ) ) labels : cmd : examplesgen.sh sloth_id : my-service-sloth-slo-my-service-0 sloth_service : my-service sloth_slo : sloth-slo-my-service-0 sloth_window : 5m - record : slo:sli_error:ratio_rate30m expr : |- ( 1 - ( ( sum(rate(http_request_duration_seconds_count{job=\"myservice\",code!~\"(5..|429)\"}[30m])) ) / ( sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[30m])) ) ) ) labels : cmd : examplesgen.sh sloth_id : my-service-sloth-slo-my-service-0 sloth_service : my-service sloth_slo : sloth-slo-my-service-0 sloth_window : 30m - record : slo:sli_error:ratio_rate1h expr : |- ( 1 - ( ( sum(rate(http_request_duration_seconds_count{job=\"myservice\",code!~\"(5..|429)\"}[1h])) ) / ( sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1h])) ) ) ) labels : cmd : examplesgen.sh sloth_id : my-service-sloth-slo-my-service-0 sloth_service : my-service sloth_slo : sloth-slo-my-service-0 sloth_window : 1h - record : slo:sli_error:ratio_rate2h expr : |- ( 1 - ( ( sum(rate(http_request_duration_seconds_count{job=\"myservice\",code!~\"(5..|429)\"}[2h])) ) / ( sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[2h])) ) ) ) labels : cmd : examplesgen.sh sloth_id : my-service-sloth-slo-my-service-0 sloth_service : my-service sloth_slo : sloth-slo-my-service-0 sloth_window : 2h - record : slo:sli_error:ratio_rate6h expr : |- ( 1 - ( ( sum(rate(http_request_duration_seconds_count{job=\"myservice\",code!~\"(5..|429)\"}[6h])) ) / ( sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[6h])) ) ) ) labels : cmd : examplesgen.sh sloth_id : my-service-sloth-slo-my-service-0 sloth_service : my-service sloth_slo : sloth-slo-my-service-0 sloth_window : 6h - record : slo:sli_error:ratio_rate1d expr : |- ( 1 - ( ( sum(rate(http_request_duration_seconds_count{job=\"myservice\",code!~\"(5..|429)\"}[1d])) ) / ( sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1d])) ) ) ) labels : cmd : examplesgen.sh sloth_id : my-service-sloth-slo-my-service-0 sloth_service : my-service sloth_slo : sloth-slo-my-service-0 sloth_window : 1d - record : slo:sli_error:ratio_rate3d expr : |- ( 1 - ( ( sum(rate(http_request_duration_seconds_count{job=\"myservice\",code!~\"(5..|429)\"}[3d])) ) / ( sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[3d])) ) ) ) labels : cmd : examplesgen.sh sloth_id : my-service-sloth-slo-my-service-0 sloth_service : my-service sloth_slo : sloth-slo-my-service-0 sloth_window : 3d - record : slo:sli_error:ratio_rate30d expr : | sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"my-service-sloth-slo-my-service-0\", sloth_service=\"my-service\", sloth_slo=\"sloth-slo-my-service-0\"}[30d]) / ignoring (sloth_window) count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"my-service-sloth-slo-my-service-0\", sloth_service=\"my-service\", sloth_slo=\"sloth-slo-my-service-0\"}[30d]) labels : sloth_window : 30d - name : sloth-slo-meta-recordings-my-service-sloth-slo-my-service-0 rules : - record : slo:objective:ratio expr : vector(0.9990000000000001) labels : cmd : examplesgen.sh sloth_id : my-service-sloth-slo-my-service-0 sloth_service : my-service sloth_slo : sloth-slo-my-service-0 - record : slo:error_budget:ratio expr : vector(1-0.9990000000000001) labels : cmd : examplesgen.sh sloth_id : my-service-sloth-slo-my-service-0 sloth_service : my-service sloth_slo : sloth-slo-my-service-0 - record : slo:time_period:days expr : vector(30) labels : cmd : examplesgen.sh sloth_id : my-service-sloth-slo-my-service-0 sloth_service : my-service sloth_slo : sloth-slo-my-service-0 - record : slo:current_burn_rate:ratio expr : | slo:sli_error:ratio_rate5m{sloth_id=\"my-service-sloth-slo-my-service-0\", sloth_service=\"my-service\", sloth_slo=\"sloth-slo-my-service-0\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"my-service-sloth-slo-my-service-0\", sloth_service=\"my-service\", sloth_slo=\"sloth-slo-my-service-0\"} labels : cmd : examplesgen.sh sloth_id : my-service-sloth-slo-my-service-0 sloth_service : my-service sloth_slo : sloth-slo-my-service-0 - record : slo:period_burn_rate:ratio expr : | slo:sli_error:ratio_rate30d{sloth_id=\"my-service-sloth-slo-my-service-0\", sloth_service=\"my-service\", sloth_slo=\"sloth-slo-my-service-0\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"my-service-sloth-slo-my-service-0\", sloth_service=\"my-service\", sloth_slo=\"sloth-slo-my-service-0\"} labels : cmd : examplesgen.sh sloth_id : my-service-sloth-slo-my-service-0 sloth_service : my-service sloth_slo : sloth-slo-my-service-0 - record : slo:period_error_budget_remaining:ratio expr : 1 - slo:period_burn_rate:ratio{sloth_id=\"my-service-sloth-slo-my-service-0\", sloth_service=\"my-service\", sloth_slo=\"sloth-slo-my-service-0\"} labels : cmd : examplesgen.sh sloth_id : my-service-sloth-slo-my-service-0 sloth_service : my-service sloth_slo : sloth-slo-my-service-0 - record : sloth_slo_info expr : vector(1) labels : cmd : examplesgen.sh sloth_id : my-service-sloth-slo-my-service-0 sloth_mode : cli-gen-openslo sloth_objective : \"99.9\" sloth_service : my-service sloth_slo : sloth-slo-my-service-0 sloth_spec : openslo/v1alpha sloth_version : dev","title":"Getting started"},{"location":"examples/openslo/kubernetes-apiserver/","text":"SLO spec Generated # This example shows the same example as kubernetes-apiserver.yml but using OpenSLO spec. # It will generate the Prometheus rules in a Prometheus rules format. # # Take into account that OpenSLO spec has the concept of single SLO with multiple objectives # # `sloth generate -i ./examples/openslo-kubernetes-apiserver.yml` # apiVersion : openslo/v1alpha kind : SLO metadata : name : requests-availability-openslo displayName : Requests Availability spec : service : k8s-apiserver description : \"Apiserver are returning correctly the requests to the clients (kubectl users, controllers...).\" budgetingMethod : Occurrences objectives : - ratioMetrics : good : source : prometheus queryType : promql query : sum(rate(apiserver_request_total{code!~\"(5..|429)\"}[{{.window}}])) total : source : prometheus queryType : promql query : sum(rate(apiserver_request_total[{{.window}}])) target : 0.999 timeWindows : - count : 30 unit : Day --- apiVersion : openslo/v1alpha kind : SLO metadata : name : requests-latency-openslo displayName : Requests Latency spec : service : k8s-apiserver description : \"Apiserver responses are being fast enough and this will affect the clients (kubectl users, controllers...).\" budgetingMethod : Occurrences objectives : - ratioMetrics : good : source : prometheus queryType : promql query : sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[{{.window}}])) total : source : prometheus queryType : promql query : sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[{{.window}}])) target : 0.99 - ratioMetrics : good : source : prometheus queryType : promql query : sum(rate(apiserver_request_duration_seconds_bucket{le=\"5\",verb!=\"WATCH\"}[{{.window}}])) total : source : prometheus queryType : promql query : sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[{{.window}}])) target : 0.999 timeWindows : - count : 30 unit : Day --- # Code generated by Sloth (dev): https://github.com/slok/sloth. # DO NOT EDIT. groups : - name : sloth-slo-sli-recordings-k8s-apiserver-requests-availability-openslo-0 rules : - record : slo:sli_error:ratio_rate5m expr : |- ( 1 - ( ( sum(rate(apiserver_request_total{code!~\"(5..|429)\"}[5m])) ) / ( sum(rate(apiserver_request_total[5m])) ) ) ) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-availability-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-availability-openslo-0 sloth_window : 5m - record : slo:sli_error:ratio_rate30m expr : |- ( 1 - ( ( sum(rate(apiserver_request_total{code!~\"(5..|429)\"}[30m])) ) / ( sum(rate(apiserver_request_total[30m])) ) ) ) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-availability-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-availability-openslo-0 sloth_window : 30m - record : slo:sli_error:ratio_rate1h expr : |- ( 1 - ( ( sum(rate(apiserver_request_total{code!~\"(5..|429)\"}[1h])) ) / ( sum(rate(apiserver_request_total[1h])) ) ) ) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-availability-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-availability-openslo-0 sloth_window : 1h - record : slo:sli_error:ratio_rate2h expr : |- ( 1 - ( ( sum(rate(apiserver_request_total{code!~\"(5..|429)\"}[2h])) ) / ( sum(rate(apiserver_request_total[2h])) ) ) ) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-availability-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-availability-openslo-0 sloth_window : 2h - record : slo:sli_error:ratio_rate6h expr : |- ( 1 - ( ( sum(rate(apiserver_request_total{code!~\"(5..|429)\"}[6h])) ) / ( sum(rate(apiserver_request_total[6h])) ) ) ) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-availability-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-availability-openslo-0 sloth_window : 6h - record : slo:sli_error:ratio_rate1d expr : |- ( 1 - ( ( sum(rate(apiserver_request_total{code!~\"(5..|429)\"}[1d])) ) / ( sum(rate(apiserver_request_total[1d])) ) ) ) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-availability-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-availability-openslo-0 sloth_window : 1d - record : slo:sli_error:ratio_rate3d expr : |- ( 1 - ( ( sum(rate(apiserver_request_total{code!~\"(5..|429)\"}[3d])) ) / ( sum(rate(apiserver_request_total[3d])) ) ) ) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-availability-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-availability-openslo-0 sloth_window : 3d - record : slo:sli_error:ratio_rate30d expr : | sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-availability-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability-openslo-0\"}[30d]) / ignoring (sloth_window) count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-availability-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability-openslo-0\"}[30d]) labels : sloth_window : 30d - name : sloth-slo-meta-recordings-k8s-apiserver-requests-availability-openslo-0 rules : - record : slo:objective:ratio expr : vector(0.9990000000000001) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-availability-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-availability-openslo-0 - record : slo:error_budget:ratio expr : vector(1-0.9990000000000001) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-availability-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-availability-openslo-0 - record : slo:time_period:days expr : vector(30) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-availability-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-availability-openslo-0 - record : slo:current_burn_rate:ratio expr : | slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-availability-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability-openslo-0\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"k8s-apiserver-requests-availability-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability-openslo-0\"} labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-availability-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-availability-openslo-0 - record : slo:period_burn_rate:ratio expr : | slo:sli_error:ratio_rate30d{sloth_id=\"k8s-apiserver-requests-availability-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability-openslo-0\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"k8s-apiserver-requests-availability-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability-openslo-0\"} labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-availability-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-availability-openslo-0 - record : slo:period_error_budget_remaining:ratio expr : 1 - slo:period_burn_rate:ratio{sloth_id=\"k8s-apiserver-requests-availability-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-availability-openslo-0\"} labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-availability-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-availability-openslo-0 - record : sloth_slo_info expr : vector(1) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-availability-openslo-0 sloth_mode : cli-gen-openslo sloth_objective : \"99.9\" sloth_service : k8s-apiserver sloth_slo : requests-availability-openslo-0 sloth_spec : openslo/v1alpha sloth_version : dev --- # Code generated by Sloth (dev): https://github.com/slok/sloth. # DO NOT EDIT. groups : - name : sloth-slo-sli-recordings-k8s-apiserver-requests-latency-openslo-0 rules : - record : slo:sli_error:ratio_rate5m expr : |- ( 1 - ( ( sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[5m])) ) / ( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[5m])) ) ) ) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-0 sloth_window : 5m - record : slo:sli_error:ratio_rate30m expr : |- ( 1 - ( ( sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[30m])) ) / ( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[30m])) ) ) ) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-0 sloth_window : 30m - record : slo:sli_error:ratio_rate1h expr : |- ( 1 - ( ( sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[1h])) ) / ( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[1h])) ) ) ) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-0 sloth_window : 1h - record : slo:sli_error:ratio_rate2h expr : |- ( 1 - ( ( sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[2h])) ) / ( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[2h])) ) ) ) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-0 sloth_window : 2h - record : slo:sli_error:ratio_rate6h expr : |- ( 1 - ( ( sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[6h])) ) / ( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[6h])) ) ) ) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-0 sloth_window : 6h - record : slo:sli_error:ratio_rate1d expr : |- ( 1 - ( ( sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[1d])) ) / ( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[1d])) ) ) ) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-0 sloth_window : 1d - record : slo:sli_error:ratio_rate3d expr : |- ( 1 - ( ( sum(rate(apiserver_request_duration_seconds_bucket{le=\"0.4\",verb!=\"WATCH\"}[3d])) ) / ( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[3d])) ) ) ) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-0 sloth_window : 3d - record : slo:sli_error:ratio_rate30d expr : | sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-latency-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-0\"}[30d]) / ignoring (sloth_window) count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-latency-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-0\"}[30d]) labels : sloth_window : 30d - name : sloth-slo-meta-recordings-k8s-apiserver-requests-latency-openslo-0 rules : - record : slo:objective:ratio expr : vector(0.99) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-0 - record : slo:error_budget:ratio expr : vector(1-0.99) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-0 - record : slo:time_period:days expr : vector(30) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-0 - record : slo:current_burn_rate:ratio expr : | slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-latency-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-0\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"k8s-apiserver-requests-latency-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-0\"} labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-0 - record : slo:period_burn_rate:ratio expr : | slo:sli_error:ratio_rate30d{sloth_id=\"k8s-apiserver-requests-latency-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-0\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"k8s-apiserver-requests-latency-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-0\"} labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-0 - record : slo:period_error_budget_remaining:ratio expr : 1 - slo:period_burn_rate:ratio{sloth_id=\"k8s-apiserver-requests-latency-openslo-0\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-0\"} labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-0 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-0 - record : sloth_slo_info expr : vector(1) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-0 sloth_mode : cli-gen-openslo sloth_objective : \"99\" sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-0 sloth_spec : openslo/v1alpha sloth_version : dev - name : sloth-slo-sli-recordings-k8s-apiserver-requests-latency-openslo-1 rules : - record : slo:sli_error:ratio_rate5m expr : |- ( 1 - ( ( sum(rate(apiserver_request_duration_seconds_bucket{le=\"5\",verb!=\"WATCH\"}[5m])) ) / ( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[5m])) ) ) ) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-1 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-1 sloth_window : 5m - record : slo:sli_error:ratio_rate30m expr : |- ( 1 - ( ( sum(rate(apiserver_request_duration_seconds_bucket{le=\"5\",verb!=\"WATCH\"}[30m])) ) / ( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[30m])) ) ) ) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-1 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-1 sloth_window : 30m - record : slo:sli_error:ratio_rate1h expr : |- ( 1 - ( ( sum(rate(apiserver_request_duration_seconds_bucket{le=\"5\",verb!=\"WATCH\"}[1h])) ) / ( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[1h])) ) ) ) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-1 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-1 sloth_window : 1h - record : slo:sli_error:ratio_rate2h expr : |- ( 1 - ( ( sum(rate(apiserver_request_duration_seconds_bucket{le=\"5\",verb!=\"WATCH\"}[2h])) ) / ( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[2h])) ) ) ) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-1 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-1 sloth_window : 2h - record : slo:sli_error:ratio_rate6h expr : |- ( 1 - ( ( sum(rate(apiserver_request_duration_seconds_bucket{le=\"5\",verb!=\"WATCH\"}[6h])) ) / ( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[6h])) ) ) ) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-1 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-1 sloth_window : 6h - record : slo:sli_error:ratio_rate1d expr : |- ( 1 - ( ( sum(rate(apiserver_request_duration_seconds_bucket{le=\"5\",verb!=\"WATCH\"}[1d])) ) / ( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[1d])) ) ) ) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-1 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-1 sloth_window : 1d - record : slo:sli_error:ratio_rate3d expr : |- ( 1 - ( ( sum(rate(apiserver_request_duration_seconds_bucket{le=\"5\",verb!=\"WATCH\"}[3d])) ) / ( sum(rate(apiserver_request_duration_seconds_count{verb!=\"WATCH\"}[3d])) ) ) ) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-1 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-1 sloth_window : 3d - record : slo:sli_error:ratio_rate30d expr : | sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-latency-openslo-1\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-1\"}[30d]) / ignoring (sloth_window) count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-latency-openslo-1\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-1\"}[30d]) labels : sloth_window : 30d - name : sloth-slo-meta-recordings-k8s-apiserver-requests-latency-openslo-1 rules : - record : slo:objective:ratio expr : vector(0.9990000000000001) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-1 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-1 - record : slo:error_budget:ratio expr : vector(1-0.9990000000000001) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-1 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-1 - record : slo:time_period:days expr : vector(30) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-1 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-1 - record : slo:current_burn_rate:ratio expr : | slo:sli_error:ratio_rate5m{sloth_id=\"k8s-apiserver-requests-latency-openslo-1\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-1\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"k8s-apiserver-requests-latency-openslo-1\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-1\"} labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-1 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-1 - record : slo:period_burn_rate:ratio expr : | slo:sli_error:ratio_rate30d{sloth_id=\"k8s-apiserver-requests-latency-openslo-1\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-1\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"k8s-apiserver-requests-latency-openslo-1\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-1\"} labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-1 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-1 - record : slo:period_error_budget_remaining:ratio expr : 1 - slo:period_burn_rate:ratio{sloth_id=\"k8s-apiserver-requests-latency-openslo-1\", sloth_service=\"k8s-apiserver\", sloth_slo=\"requests-latency-openslo-1\"} labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-1 sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-1 - record : sloth_slo_info expr : vector(1) labels : cmd : examplesgen.sh sloth_id : k8s-apiserver-requests-latency-openslo-1 sloth_mode : cli-gen-openslo sloth_objective : \"99.9\" sloth_service : k8s-apiserver sloth_slo : requests-latency-openslo-1 sloth_spec : openslo/v1alpha sloth_version : dev","title":"Kubernetes APIserver"},{"location":"faq/","text":"Why Sloth \u00b6 Creating Prometheus rules for SLI/SLO framework is hard, error prone and is pure toil. Sloth abstracts this task, and we also gain: Read friendlyness: Easy to read and declare SLI/SLOs. Gitops: Easy to integrate with CI flows like validation, checks... Reliability and testing: Generated prometheus rules are already known that work, no need the creation of tests. Centralize features and error fixes: An update in Sloth would be applied to all the SLOs managed/generated with it. Standardize the metrics: Same conventions, automatic dashboards... Rollout future features for free with the same specs: e.g automatic report creation. SLI? \u00b6 Service level indicator . Is a way of quantify how your service should be responding to user. TL;DR: What is good/bad service for your users. E.g: Requests >=500 considered errors. Requests >200ms considered errors. Process executions with exit code >0 considered errors. Normally is measured using events: good/bad-events / total-events . SLO? \u00b6 Service level objective . A percent that will tell how many SLI errors your service can have in a specific period of time. Error budget? \u00b6 An error budget is the ammount of errors (driven by the SLI ) you can have in a specific period of time, this is driven by the SLO . Lets see an example: SLI Error: Requests status code >= 500 Period: 30 days SLO: 99.9% Error budget: 0.0999 (100-99.9) Total requests in 30 days: 10000 Available error requests: 9.99 (10000 * 0.0999 / 100) If we have more than 9.99 request response with >=500 status code, we would be burning more error budget than the available, if we have less errors, we would end without spending all the error budget. Burn rate? \u00b6 The speed you are consuming your error budget. This is key for SLO based alerting (Sloth will create all these alerts), because depending on the speed you are consuming your error budget, it will trigger your alerts. Speed/rate examples: 1: You are consuming 100% of the error budget in the expected period (e.g if 30d period, then 30 days). 2: You are consuming 200% of the error budget in the expected period (e.g if 30d period, then 15 days). 60: You are consuming 6000% of the error budget in the expected period (e.g if 30d period, then 12h hour). 1080: You are consuming 108000% of the error budget in the expected period (e.g if 30d period, then 40 minute). SLO based alerting? \u00b6 With SLO based alerting you will get better alerting to a regular alerting system, because: Alerts on symptoms ( SLI s), not causes. Trigger at different levels (warning/ticket and critical/page). Takes into account time and quantity, this is: speed of errors and number of errors on specific time. The result of these is: Correct time to trigger alerts (important == fast, not so important == slow). Reduce alert fatigue. Reduce false positives and negatives. What are ticket and page alerts? \u00b6 MWMB type alerting is based on two kinds of alerts, ticket and page : page : Are critical alerts that normally are used to wake up , notify on important channels, trigger oncall... ticket : The warning alerts that normally open tickets, post messages on non-important Slack channels... These are triggered in different ways, page alerts are triggered faster but require faster error budget burn rate, on the other side, ticket alerts are triggered slower and require a lower and constant error budget burn rate. Can I disable alerts? \u00b6 Yes, use disable: true on page and ticket . Grafana dashboard? \u00b6 Check grafana-dashboard , this dashboard will load the SLOs automatically. CLI VS K8s controller? \u00b6 If you don't have Kubernetes and you need raw prometheus rules, its easy, the CLI ( generate ) mode is the only one that supports raw prometheus rules. On the other side if you have Kubernetes (and most likely prometheus-operator). Using sloth.slok.dev/v1/PrometheusServiceLevel CRD will output the same result used as a CLI or used as a Kubernetes controller. The only difference between the two modes is how Sloth application loads the SLOs manifest. For either mode, the output will be a Prometheus Operator Rules CRD. Both have pros and cons: The CLI in an advanced gitops flow gives you faster feedback loops because of the generation on the CI. Using as a controller the CRD integrates better in helm charts and similar because it removes that generation extra step. Having the SLO as CRs in K8s, improves the discovery as you can always do kubectl get slos --all-namespaces . The CLI doesn't require an app running, Sloth CRDs registered... the SLO generation process is simpler, so you have less PoFs. In a few words, theres no right or wrong answer, pick your own flavour based on your use case: teams size, engineers in the company or development flow... SLI types on manifests \u00b6 prometheus/v1 (regular) and sloth.slok.dev/v1/PrometheusServiceLevel (Kubernetes CRD), support 3 ways of setting SLIs: Events: This are based on 2 queries, the one that returns the total/valid number of events and the one that returns the bad events. Sloht will make a query dividing them to get the final error ratio (0-1). Raw: This is a single raw prometheus query that when executed will return the error ratio (0-1). Plugins: Check plugins for more information. It reference plugins that will be preloaded and already developed. Sloth will execute them on generation and it will return a raw query. This is the best way to abstract queries from users or having SLOs at scale. Custom SLO time windows? \u00b6 Please Check SLO period windows section","title":"F.A.Q"},{"location":"faq/#why-sloth","text":"Creating Prometheus rules for SLI/SLO framework is hard, error prone and is pure toil. Sloth abstracts this task, and we also gain: Read friendlyness: Easy to read and declare SLI/SLOs. Gitops: Easy to integrate with CI flows like validation, checks... Reliability and testing: Generated prometheus rules are already known that work, no need the creation of tests. Centralize features and error fixes: An update in Sloth would be applied to all the SLOs managed/generated with it. Standardize the metrics: Same conventions, automatic dashboards... Rollout future features for free with the same specs: e.g automatic report creation.","title":"Why Sloth"},{"location":"faq/#sli","text":"Service level indicator . Is a way of quantify how your service should be responding to user. TL;DR: What is good/bad service for your users. E.g: Requests >=500 considered errors. Requests >200ms considered errors. Process executions with exit code >0 considered errors. Normally is measured using events: good/bad-events / total-events .","title":"SLI?"},{"location":"faq/#slo","text":"Service level objective . A percent that will tell how many SLI errors your service can have in a specific period of time.","title":"SLO?"},{"location":"faq/#error-budget","text":"An error budget is the ammount of errors (driven by the SLI ) you can have in a specific period of time, this is driven by the SLO . Lets see an example: SLI Error: Requests status code >= 500 Period: 30 days SLO: 99.9% Error budget: 0.0999 (100-99.9) Total requests in 30 days: 10000 Available error requests: 9.99 (10000 * 0.0999 / 100) If we have more than 9.99 request response with >=500 status code, we would be burning more error budget than the available, if we have less errors, we would end without spending all the error budget.","title":"Error budget?"},{"location":"faq/#burn-rate","text":"The speed you are consuming your error budget. This is key for SLO based alerting (Sloth will create all these alerts), because depending on the speed you are consuming your error budget, it will trigger your alerts. Speed/rate examples: 1: You are consuming 100% of the error budget in the expected period (e.g if 30d period, then 30 days). 2: You are consuming 200% of the error budget in the expected period (e.g if 30d period, then 15 days). 60: You are consuming 6000% of the error budget in the expected period (e.g if 30d period, then 12h hour). 1080: You are consuming 108000% of the error budget in the expected period (e.g if 30d period, then 40 minute).","title":"Burn rate?"},{"location":"faq/#slo-based-alerting","text":"With SLO based alerting you will get better alerting to a regular alerting system, because: Alerts on symptoms ( SLI s), not causes. Trigger at different levels (warning/ticket and critical/page). Takes into account time and quantity, this is: speed of errors and number of errors on specific time. The result of these is: Correct time to trigger alerts (important == fast, not so important == slow). Reduce alert fatigue. Reduce false positives and negatives.","title":"SLO based alerting?"},{"location":"faq/#what-are-ticket-and-page-alerts","text":"MWMB type alerting is based on two kinds of alerts, ticket and page : page : Are critical alerts that normally are used to wake up , notify on important channels, trigger oncall... ticket : The warning alerts that normally open tickets, post messages on non-important Slack channels... These are triggered in different ways, page alerts are triggered faster but require faster error budget burn rate, on the other side, ticket alerts are triggered slower and require a lower and constant error budget burn rate.","title":"What are ticket and page alerts?"},{"location":"faq/#can-i-disable-alerts","text":"Yes, use disable: true on page and ticket .","title":"Can I disable alerts?"},{"location":"faq/#grafana-dashboard","text":"Check grafana-dashboard , this dashboard will load the SLOs automatically.","title":"Grafana dashboard?"},{"location":"faq/#cli-vs-k8s-controller","text":"If you don't have Kubernetes and you need raw prometheus rules, its easy, the CLI ( generate ) mode is the only one that supports raw prometheus rules. On the other side if you have Kubernetes (and most likely prometheus-operator). Using sloth.slok.dev/v1/PrometheusServiceLevel CRD will output the same result used as a CLI or used as a Kubernetes controller. The only difference between the two modes is how Sloth application loads the SLOs manifest. For either mode, the output will be a Prometheus Operator Rules CRD. Both have pros and cons: The CLI in an advanced gitops flow gives you faster feedback loops because of the generation on the CI. Using as a controller the CRD integrates better in helm charts and similar because it removes that generation extra step. Having the SLO as CRs in K8s, improves the discovery as you can always do kubectl get slos --all-namespaces . The CLI doesn't require an app running, Sloth CRDs registered... the SLO generation process is simpler, so you have less PoFs. In a few words, theres no right or wrong answer, pick your own flavour based on your use case: teams size, engineers in the company or development flow...","title":"CLI VS K8s controller?"},{"location":"faq/#sli-types-on-manifests","text":"prometheus/v1 (regular) and sloth.slok.dev/v1/PrometheusServiceLevel (Kubernetes CRD), support 3 ways of setting SLIs: Events: This are based on 2 queries, the one that returns the total/valid number of events and the one that returns the bad events. Sloht will make a query dividing them to get the final error ratio (0-1). Raw: This is a single raw prometheus query that when executed will return the error ratio (0-1). Plugins: Check plugins for more information. It reference plugins that will be preloaded and already developed. Sloth will execute them on generation and it will return a raw query. This is the best way to abstract queries from users or having SLOs at scale.","title":"SLI types on manifests"},{"location":"faq/#custom-slo-time-windows","text":"Please Check SLO period windows section","title":"Custom SLO time windows?"},{"location":"introduction/","text":"Get sloth and execute with one of the examples: sloth generate -i ./examples/getting-started.yml From the spec, you will obtain the rules for Prometheus with the generated SLO recording rules and alert rules. SLO spec Generated version : \"prometheus/v1\" service : \"myservice\" labels : owner : \"myteam\" repo : \"myorg/myservice\" tier : \"2\" slos : # We allow failing (5xx and 429) 1 request every 1000 requests (99.9%). - name : \"requests-availability\" objective : 99.9 description : \"Common SLO based on availability for HTTP request responses.\" sli : events : error_query : sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[{{.window}}])) total_query : sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[{{.window}}])) alerting : name : MyServiceHighErrorRate labels : category : \"availability\" annotations : # Overwrite default Sloth SLO alert summmary on ticket and page alerts. summary : \"High error rate on 'myservice' requests responses\" page_alert : labels : severity : pageteam routing_key : myteam ticket_alert : labels : severity : \"slack\" slack_channel : \"#alerts-myteam\" --- # Code generated by Sloth (dev): https://github.com/slok/sloth. # DO NOT EDIT. groups : - name : sloth-slo-sli-recordings-myservice-requests-availability rules : - record : slo:sli_error:ratio_rate5m expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[5m]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[5m]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 5m tier : \"2\" - record : slo:sli_error:ratio_rate30m expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[30m]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[30m]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 30m tier : \"2\" - record : slo:sli_error:ratio_rate1h expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1h]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1h]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 1h tier : \"2\" - record : slo:sli_error:ratio_rate2h expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[2h]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[2h]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 2h tier : \"2\" - record : slo:sli_error:ratio_rate6h expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[6h]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[6h]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 6h tier : \"2\" - record : slo:sli_error:ratio_rate1d expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[1d]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[1d]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 1d tier : \"2\" - record : slo:sli_error:ratio_rate3d expr : | (sum(rate(http_request_duration_seconds_count{job=\"myservice\",code=~\"(5..|429)\"}[3d]))) / (sum(rate(http_request_duration_seconds_count{job=\"myservice\"}[3d]))) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability sloth_window : 3d tier : \"2\" - record : slo:sli_error:ratio_rate30d expr : | sum_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d]) / ignoring (sloth_window) count_over_time(slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"}[30d]) labels : sloth_window : 30d - name : sloth-slo-meta-recordings-myservice-requests-availability rules : - record : slo:objective:ratio expr : vector(0.9990000000000001) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : slo:error_budget:ratio expr : vector(1-0.9990000000000001) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : slo:time_period:days expr : vector(30) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : slo:current_burn_rate:ratio expr : | slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : slo:period_burn_rate:ratio expr : | slo:sli_error:ratio_rate30d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} / on(sloth_id, sloth_slo, sloth_service) group_left slo:error_budget:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : slo:period_error_budget_remaining:ratio expr : 1 - slo:period_burn_rate:ratio{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_service : myservice sloth_slo : requests-availability tier : \"2\" - record : sloth_slo_info expr : vector(1) labels : cmd : examplesgen.sh owner : myteam repo : myorg/myservice sloth_id : myservice-requests-availability sloth_mode : cli-gen-prom sloth_objective : \"99.9\" sloth_service : myservice sloth_slo : requests-availability sloth_spec : prometheus/v1 sloth_version : dev tier : \"2\" - name : sloth-slo-alerts-myservice-requests-availability rules : - alert : MyServiceHighErrorRate expr : | ( (slo:sli_error:ratio_rate5m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (14.4 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (14.4 * 0.0009999999999999432)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate30m{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (6 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (6 * 0.0009999999999999432)) ) labels : category : availability routing_key : myteam severity : pageteam sloth_severity : page annotations : summary : High error rate on 'myservice' requests responses title : (page) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast. - alert : MyServiceHighErrorRate expr : | ( (slo:sli_error:ratio_rate2h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (3 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate1d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (3 * 0.0009999999999999432)) ) or ignoring (sloth_window) ( (slo:sli_error:ratio_rate6h{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (1 * 0.0009999999999999432)) and ignoring (sloth_window) (slo:sli_error:ratio_rate3d{sloth_id=\"myservice-requests-availability\", sloth_service=\"myservice\", sloth_slo=\"requests-availability\"} > (1 * 0.0009999999999999432)) ) labels : category : availability severity : slack slack_channel : '#alerts-myteam' sloth_severity : ticket annotations : summary : High error rate on 'myservice' requests responses title : (ticket) {{$labels.sloth_service}} {{$labels.sloth_slo}} SLO error budget burn rate is too fast.","title":"Getting started"},{"location":"introduction/architecture/","text":"How does it work \u00b6 Sloth uses Prometheus rules to generate SLOs. Based on the generated recording and alert rules it creates a reliable and uniform SLO implementation: stateDiagram-v2 direction LR input: 1 Sloth spec sloth: Sloth output: N prometheus rules input --> sloth sloth --> output state sloth { direction LR load: Load SLO Spec metadata: Gen Metadata rules slis: Gen SLI rules alerts: Gen Alert rules save: Out format load --> metadata load --> slis load --> alerts metadata --> save slis --> save alerts --> save } The Prometheus rules that Sloth generates, fall in 3 categories: SLIs : These rules are the base, they use the queries provided by the user to get a value used to show what is the error service level (availability). It creates multiple rules for different time windows, these different results will be used for the alerts. Metadata : These are used as informative metrics, like the remaining error budget, the SLO objective percent... These are very handy for SLO visualization, e.g Grafana dashboard. Alerts : These are the multiwindow-multiburn alerts that are based on the SLI rules. Sloth will take the service level spec and for each SLO in the spec will create 3 rule groups with the above categories. Metrics \u00b6 The Sloth generated rules will share the same metric name across SLOs. However the labels are the key to identify the different services, SLO... This is how we obtain a uniform way of describing all the SLOs across different teams and services. To get all the available metric names created by Sloth, use this query: count({sloth_id!=\"\"}) by (__name__) Alerts \u00b6 Sloth SLO alerts use multiwindow-multiburn method. It will generate 2 types of alerts: Critical/page: Pay attention right now. Warning/ticket: Take into account, however is not urgent. Using 4 different alerts across different time window periods: Critical/Page in short time window: Very very high rate of burning budget. Critical/Page in medium time window: High rate rate of burning budget. Warning/Ticket in medium time window: Constant normal rate of burning budget. Warning/Ticket in long time window: Constant low rate of burning budget. Sloth doesn't trigger/generate the alerts itself, Prometheus will by using Sloth generated alerting rules. Normally something connected with Prometheus (like alertmanager ) will trigger these alerts notifications (e.g Slack, Pagerduty...).","title":"Architecture"},{"location":"introduction/architecture/#how-does-it-work","text":"Sloth uses Prometheus rules to generate SLOs. Based on the generated recording and alert rules it creates a reliable and uniform SLO implementation: stateDiagram-v2 direction LR input: 1 Sloth spec sloth: Sloth output: N prometheus rules input --> sloth sloth --> output state sloth { direction LR load: Load SLO Spec metadata: Gen Metadata rules slis: Gen SLI rules alerts: Gen Alert rules save: Out format load --> metadata load --> slis load --> alerts metadata --> save slis --> save alerts --> save } The Prometheus rules that Sloth generates, fall in 3 categories: SLIs : These rules are the base, they use the queries provided by the user to get a value used to show what is the error service level (availability). It creates multiple rules for different time windows, these different results will be used for the alerts. Metadata : These are used as informative metrics, like the remaining error budget, the SLO objective percent... These are very handy for SLO visualization, e.g Grafana dashboard. Alerts : These are the multiwindow-multiburn alerts that are based on the SLI rules. Sloth will take the service level spec and for each SLO in the spec will create 3 rule groups with the above categories.","title":"How does it work"},{"location":"introduction/architecture/#metrics","text":"The Sloth generated rules will share the same metric name across SLOs. However the labels are the key to identify the different services, SLO... This is how we obtain a uniform way of describing all the SLOs across different teams and services. To get all the available metric names created by Sloth, use this query: count({sloth_id!=\"\"}) by (__name__)","title":"Metrics"},{"location":"introduction/architecture/#alerts","text":"Sloth SLO alerts use multiwindow-multiburn method. It will generate 2 types of alerts: Critical/page: Pay attention right now. Warning/ticket: Take into account, however is not urgent. Using 4 different alerts across different time window periods: Critical/Page in short time window: Very very high rate of burning budget. Critical/Page in medium time window: High rate rate of burning budget. Warning/Ticket in medium time window: Constant normal rate of burning budget. Warning/Ticket in long time window: Constant low rate of burning budget. Sloth doesn't trigger/generate the alerts itself, Prometheus will by using Sloth generated alerting rules. Normally something connected with Prometheus (like alertmanager ) will trigger these alerts notifications (e.g Slack, Pagerduty...).","title":"Alerts"},{"location":"introduction/dashboards/","text":"Sloth comes with Grafana ready dashboards to be imported and used. Detailed SLOs \u00b6 Get it here This dashboards features detailed view of each of the SLOs. Every SLO will show: SLI. SLO metadata details (name, objective...). SLO Burn rate. Remaining error budget for the current month (Since 1 st ). Remaining error budget for the last 30 days. In case of enabled alerts, show the state of the current alerts. Error budget month burndown chart. Burn rate magnitude. Apart from this, the dashboards has a general view of the current exceeded SLO list and graph. High level overview \u00b6 Get it here This dashboards shows a high level overview of all the SLOs in the system managed by sloth. Normally this dashboards will be used to check correlation between SLO error budget burns. This dashboards comes with: Information of SLOs (quantity, average burn rate of all, triggering alerts...). Graph and tables of the SLOs currently burning budget at high rates. Timeline with all SLOS error budget burns.","title":"Dashboards"},{"location":"introduction/dashboards/#detailed-slos","text":"Get it here This dashboards features detailed view of each of the SLOs. Every SLO will show: SLI. SLO metadata details (name, objective...). SLO Burn rate. Remaining error budget for the current month (Since 1 st ). Remaining error budget for the last 30 days. In case of enabled alerts, show the state of the current alerts. Error budget month burndown chart. Burn rate magnitude. Apart from this, the dashboards has a general view of the current exceeded SLO list and graph.","title":"Detailed SLOs"},{"location":"introduction/dashboards/#high-level-overview","text":"Get it here This dashboards shows a high level overview of all the SLOs in the system managed by sloth. Normally this dashboards will be used to check correlation between SLO error budget burns. This dashboards comes with: Information of SLOs (quantity, average burn rate of all, triggering alerts...). Graph and tables of the SLOs currently burning budget at high rates. Timeline with all SLOS error budget burns.","title":"High level overview"},{"location":"introduction/features/","text":"Simple, maintainable and understandable SLO spec. Reliable SLO metrics and alerts. Based on Google SLO implementation and multi window multi burn alerts framework. Autogenerates Prometheus SLI recording rules in different time windows. Autogenerates Prometheus SLO metadata rules. Autogenerates Prometheus SLO multi window multi burn alert rules (Page and warning). SLO spec validation (including validate command for Gitops and CI). Customization of labels, disabling different type of alerts... A single way (uniform) of creating SLOs across all different services and teams. Automatic Grafana dashboard to see all your SLOs state. Single binary and easy to use CLI. Kubernetes ( Prometheus-operator ) support. Kubernetes Controller/operator mode with CRDs. Support different SLI types. Support for SLI plugins A library with common SLI plugins . OpenSLO support.","title":"Features"},{"location":"introduction/install/","text":"Binary releases \u00b6 Using github releases: https://github.com/slok/sloth/releases Using asdf : https://github.com/slok/asdf-sloth Using Arch linux AUR: https://aur.archlinux.org/packages/sloth-bin Docker images \u00b6 Tip All merged PRs on main branch have a docker image release. Official multi arch container images in ghcr . docker pull ghcr.io/slok/sloth Building from source code \u00b6 Clone the repository and build: git clone git@github.com:slok/sloth.git && \\ cd ./sloth && \\ make build && \\ ls -la ./bin Kubernetes \u00b6 Raw Kustomize Helm Raw Kubernetes manifests without common SLI plugins Raw Kubernetes manifests with common SLI plugins apiVersion : kustomize.config.k8s.io/v1beta1 kind : Kustomization resources : - https://raw.githubusercontent.com/slok/sloth/v0.10.0/pkg/kubernetes/gen/crd/sloth.slok.dev_prometheusservicelevels.yaml - https://raw.githubusercontent.com/slok/sloth/v0.10.0/deploy/kubernetes/raw/sloth-with-common-plugins.yaml Helm directory is here , however, Sloth has helm releases that can be used, example: helm repo add sloth https://slok.github.io/sloth helm repo update helm template sloth/sloth --include-crds","title":"Installation"},{"location":"introduction/install/#binary-releases","text":"Using github releases: https://github.com/slok/sloth/releases Using asdf : https://github.com/slok/asdf-sloth Using Arch linux AUR: https://aur.archlinux.org/packages/sloth-bin","title":" Binary releases"},{"location":"introduction/install/#docker-images","text":"Tip All merged PRs on main branch have a docker image release. Official multi arch container images in ghcr . docker pull ghcr.io/slok/sloth","title":" Docker images"},{"location":"introduction/install/#building-from-source-code","text":"Clone the repository and build: git clone git@github.com:slok/sloth.git && \\ cd ./sloth && \\ make build && \\ ls -la ./bin","title":" Building from source code"},{"location":"introduction/install/#kubernetes","text":"Raw Kustomize Helm Raw Kubernetes manifests without common SLI plugins Raw Kubernetes manifests with common SLI plugins apiVersion : kustomize.config.k8s.io/v1beta1 kind : Kustomization resources : - https://raw.githubusercontent.com/slok/sloth/v0.10.0/pkg/kubernetes/gen/crd/sloth.slok.dev_prometheusservicelevels.yaml - https://raw.githubusercontent.com/slok/sloth/v0.10.0/deploy/kubernetes/raw/sloth-with-common-plugins.yaml Helm directory is here , however, Sloth has helm releases that can be used, example: helm repo add sloth https://slok.github.io/sloth helm repo update helm template sloth/sloth --include-crds","title":" Kubernetes"},{"location":"sli-plugins/coredns-availability/","text":"CoreDNS availability \u00b6 Availability plugin for CoreDNS . Uses the coreDNS dns response metrics and error rcodes to get the correct and invalid availability. By default the plugin will measure as errors the SERVFAIL rcodes, however this can be overwrite with a regex using custom_rcode_regex option. Options \u00b6 filter : ( Optional ) A prometheus filter string using concatenated labels (e.g: exported_service=\"alertmanager-api\",service=\"alertgram\" ) custom_rcode_regex : ( Optional ) Custom regex to match error rcodes (e.g: (NXDOMAIN|SERVFAIL|FORMERR) ). More codes here . If not set it will be used SERVFAIL by default. Metric requirements \u00b6 coredns_dns_responses_total : From coreDNS . Usage examples \u00b6 Without filter nor custom rcode regex \u00b6 sli : plugin : id : \"sloth-common/coredns/availability\" Default rcode and custom filter \u00b6 sli : plugin : id : \"sloth-common/coredns/availability\" options : filter : job=\"kube-dns\",server=\"dns://:53\",service=\"kube-dns\", zone=\".\" Custom rcode without filters \u00b6 sli : plugin : id : \"sloth-common/coredns/availability\" options : custom_rcode_regex : (NXDOMAIN|SERVFAIL|FORMERR) Custom rcode with filters \u00b6 sli : plugin : id : \"sloth-common/coredns/availability\" options : filter : job=\"kube-dns\",server=\"dns://:53\",service=\"kube-dns\", zone=\".\" custom_rcode_regex : (NXDOMAIN|SERVFAIL|FORMERR)","title":"CoreDNS availability"},{"location":"sli-plugins/coredns-availability/#coredns-availability","text":"Availability plugin for CoreDNS . Uses the coreDNS dns response metrics and error rcodes to get the correct and invalid availability. By default the plugin will measure as errors the SERVFAIL rcodes, however this can be overwrite with a regex using custom_rcode_regex option.","title":"CoreDNS availability"},{"location":"sli-plugins/coredns-availability/#options","text":"filter : ( Optional ) A prometheus filter string using concatenated labels (e.g: exported_service=\"alertmanager-api\",service=\"alertgram\" ) custom_rcode_regex : ( Optional ) Custom regex to match error rcodes (e.g: (NXDOMAIN|SERVFAIL|FORMERR) ). More codes here . If not set it will be used SERVFAIL by default.","title":"Options"},{"location":"sli-plugins/coredns-availability/#metric-requirements","text":"coredns_dns_responses_total : From coreDNS .","title":"Metric requirements"},{"location":"sli-plugins/coredns-availability/#usage-examples","text":"","title":"Usage examples"},{"location":"sli-plugins/coredns-availability/#without-filter-nor-custom-rcode-regex","text":"sli : plugin : id : \"sloth-common/coredns/availability\"","title":"Without filter nor custom rcode regex"},{"location":"sli-plugins/coredns-availability/#default-rcode-and-custom-filter","text":"sli : plugin : id : \"sloth-common/coredns/availability\" options : filter : job=\"kube-dns\",server=\"dns://:53\",service=\"kube-dns\", zone=\".\"","title":"Default rcode and custom filter"},{"location":"sli-plugins/coredns-availability/#custom-rcode-without-filters","text":"sli : plugin : id : \"sloth-common/coredns/availability\" options : custom_rcode_regex : (NXDOMAIN|SERVFAIL|FORMERR)","title":"Custom rcode without filters"},{"location":"sli-plugins/coredns-availability/#custom-rcode-with-filters","text":"sli : plugin : id : \"sloth-common/coredns/availability\" options : filter : job=\"kube-dns\",server=\"dns://:53\",service=\"kube-dns\", zone=\".\" custom_rcode_regex : (NXDOMAIN|SERVFAIL|FORMERR)","title":"Custom rcode with filters"},{"location":"sli-plugins/coredns-latency/","text":"CoreDNS latency \u00b6 Request/response latency plugin for CoreDNS . Options \u00b6 bucket : ( Required ) The max latency allowed histogram bucket. filter : ( Optional ) A prometheus filter string using concatenated labels (e.g: exported_service=\"alertmanager-api\",service=\"alertgram\" ) Metric requirements \u00b6 coredns_dns_request_duration_seconds_bucket : From coreDNS . coredns_dns_request_duration_seconds_count : From coreDNS . Usage examples \u00b6 Without filter \u00b6 sli : plugin : id : \"sloth-common/coredns/latency\" options : bucket : \"0.25\" With filter \u00b6 sli : plugin : id : \"sloth-common/coredns/latency\" options : bucket : \"0.032\" filter : job=\"kube-dns\",server=\"dns://:53\",service=\"kube-dns\", zone=\".\"","title":"CoreDNS latency"},{"location":"sli-plugins/coredns-latency/#coredns-latency","text":"Request/response latency plugin for CoreDNS .","title":"CoreDNS latency"},{"location":"sli-plugins/coredns-latency/#options","text":"bucket : ( Required ) The max latency allowed histogram bucket. filter : ( Optional ) A prometheus filter string using concatenated labels (e.g: exported_service=\"alertmanager-api\",service=\"alertgram\" )","title":"Options"},{"location":"sli-plugins/coredns-latency/#metric-requirements","text":"coredns_dns_request_duration_seconds_bucket : From coreDNS . coredns_dns_request_duration_seconds_count : From coreDNS .","title":"Metric requirements"},{"location":"sli-plugins/coredns-latency/#usage-examples","text":"","title":"Usage examples"},{"location":"sli-plugins/coredns-latency/#without-filter","text":"sli : plugin : id : \"sloth-common/coredns/latency\" options : bucket : \"0.25\"","title":"Without filter"},{"location":"sli-plugins/coredns-latency/#with-filter","text":"sli : plugin : id : \"sloth-common/coredns/latency\" options : bucket : \"0.032\" filter : job=\"kube-dns\",server=\"dns://:53\",service=\"kube-dns\", zone=\".\"","title":"With filter"},{"location":"sli-plugins/fake/","text":"Fake \u00b6 A plugin that can fake a burning rate based on speed/rate factor options. A good plugin for exploring/learning how SLOs, SLIs, error budget and SLO alerting works. You can get more information on the SRE workbook Alert on burn rate section. Options \u00b6 burn_rate : ( Required ) A number that tells the burn rate factor (e.g: 1 , 2 , 10 ...). jitter_percent : ( Optional ) A percent number that will add/remove jitter on the burned rate. Metric requirements \u00b6 Doesn't have any metric requirements. Usage examples \u00b6 0.5x speed 30d window, consumed in 60d \u00b6 sli : plugin : id : \"sloth-common/fake\" options : burn_rate : \"0.5\" 1x speed 30d window, consumed in 30d \u00b6 sli : plugin : id : \"sloth-common/fake\" options : burn_rate : \"1\" 2x speed 30d window, consumed in 15d \u00b6 sli : plugin : id : \"sloth-common/fake\" options : burn_rate : \"2\" 10x speed 30d window, consumed in 3d \u00b6 sli : plugin : id : \"sloth-common/fake\" options : burn_rate : \"10\" 10x speed 30d window, consumed in 43m \u00b6 sli : plugin : id : \"sloth-common/fake\" options : burn_rate : \"1000\" 1x speed 30d window, consumed in 30d using jitter \u00b6 sli : plugin : id : \"sloth-common/fake\" options : burn_rate : \"1\" jitter_percent : \"10\"","title":"Fake"},{"location":"sli-plugins/fake/#fake","text":"A plugin that can fake a burning rate based on speed/rate factor options. A good plugin for exploring/learning how SLOs, SLIs, error budget and SLO alerting works. You can get more information on the SRE workbook Alert on burn rate section.","title":"Fake"},{"location":"sli-plugins/fake/#options","text":"burn_rate : ( Required ) A number that tells the burn rate factor (e.g: 1 , 2 , 10 ...). jitter_percent : ( Optional ) A percent number that will add/remove jitter on the burned rate.","title":"Options"},{"location":"sli-plugins/fake/#metric-requirements","text":"Doesn't have any metric requirements.","title":"Metric requirements"},{"location":"sli-plugins/fake/#usage-examples","text":"","title":"Usage examples"},{"location":"sli-plugins/fake/#05x-speed-30d-window-consumed-in-60d","text":"sli : plugin : id : \"sloth-common/fake\" options : burn_rate : \"0.5\"","title":"0.5x speed 30d window, consumed in 60d"},{"location":"sli-plugins/fake/#1x-speed-30d-window-consumed-in-30d","text":"sli : plugin : id : \"sloth-common/fake\" options : burn_rate : \"1\"","title":"1x speed 30d window, consumed in 30d"},{"location":"sli-plugins/fake/#2x-speed-30d-window-consumed-in-15d","text":"sli : plugin : id : \"sloth-common/fake\" options : burn_rate : \"2\"","title":"2x speed 30d window, consumed in 15d"},{"location":"sli-plugins/fake/#10x-speed-30d-window-consumed-in-3d","text":"sli : plugin : id : \"sloth-common/fake\" options : burn_rate : \"10\"","title":"10x speed 30d window, consumed in 3d"},{"location":"sli-plugins/fake/#10x-speed-30d-window-consumed-in-43m","text":"sli : plugin : id : \"sloth-common/fake\" options : burn_rate : \"1000\"","title":"10x speed 30d window, consumed in 43m"},{"location":"sli-plugins/fake/#1x-speed-30d-window-consumed-in-30d-using-jitter","text":"sli : plugin : id : \"sloth-common/fake\" options : burn_rate : \"1\" jitter_percent : \"10\"","title":"1x speed 30d window, consumed in 30d using jitter"},{"location":"sli-plugins/istio-v1-availability/","text":"Istio V1 availability \u00b6 Availability plugin for Istio V1 services. Uses Istio v1 request metrics to get the availability on a service. Options \u00b6 namespace : ( required ) Kubernetes namespace of the service. service : ( required ) Service name. filter : ( Optional ) A prometheus filter string using concatenated labels Metric requirements \u00b6 istio_requests_total : From istio . Usage examples \u00b6 Without filter \u00b6 sli : plugin : id : \"sloth-common/istio/v1/availability\" options : namespace : \"default\" service : \"test\" With filters \u00b6 sli : plugin : id : \"sloth-common/istio/v1/availability\" options : namespace : \"default\" service : \"test\" filter : request_protocol=\"http\"","title":"Istio V1 availability"},{"location":"sli-plugins/istio-v1-availability/#istio-v1-availability","text":"Availability plugin for Istio V1 services. Uses Istio v1 request metrics to get the availability on a service.","title":"Istio V1 availability"},{"location":"sli-plugins/istio-v1-availability/#options","text":"namespace : ( required ) Kubernetes namespace of the service. service : ( required ) Service name. filter : ( Optional ) A prometheus filter string using concatenated labels","title":"Options"},{"location":"sli-plugins/istio-v1-availability/#metric-requirements","text":"istio_requests_total : From istio .","title":"Metric requirements"},{"location":"sli-plugins/istio-v1-availability/#usage-examples","text":"","title":"Usage examples"},{"location":"sli-plugins/istio-v1-availability/#without-filter","text":"sli : plugin : id : \"sloth-common/istio/v1/availability\" options : namespace : \"default\" service : \"test\"","title":"Without filter"},{"location":"sli-plugins/istio-v1-availability/#with-filters","text":"sli : plugin : id : \"sloth-common/istio/v1/availability\" options : namespace : \"default\" service : \"test\" filter : request_protocol=\"http\"","title":"With filters"},{"location":"sli-plugins/istio-v1-latency/","text":"Istio V1 latency \u00b6 Latency plugin for Istio V1 services. Uses Istio v1 request metrics to get the latency on a service. Options \u00b6 namespace : ( required ) Kubernetes namespace of the service. service : ( required ) Service name. bucket : ( Required ) The max latency allowed histogram bucket. exclude_errors : ( Optional ) Boolean that will exclude errored requests from valid events filter : ( Optional ) A prometheus filter string using concatenated labels Metric requirements \u00b6 istio_request_duration_milliseconds_bucket : From istio . istio_request_duration_milliseconds_count : From istio . Usage examples \u00b6 Without filter \u00b6 sli : plugin : id : \"sloth-common/istio/v1/latency\" options : namespace : \"default\" service : \"test\" bucket : \"300\" With filters \u00b6 sli : plugin : id : \"sloth-common/istio/v1/latency\" options : namespace : \"default\" service : \"test\" bucket : \"300\" filter : request_protocol=\"http\" Excluding errors (5xx) \u00b6 sli : plugin : id : \"sloth-common/istio/v1/latency\" options : namespace : \"default\" service : \"test\" bucket : \"300\" filter : request_protocol=\"http\" exclude_errors : true","title":"Istio V1 latency"},{"location":"sli-plugins/istio-v1-latency/#istio-v1-latency","text":"Latency plugin for Istio V1 services. Uses Istio v1 request metrics to get the latency on a service.","title":"Istio V1 latency"},{"location":"sli-plugins/istio-v1-latency/#options","text":"namespace : ( required ) Kubernetes namespace of the service. service : ( required ) Service name. bucket : ( Required ) The max latency allowed histogram bucket. exclude_errors : ( Optional ) Boolean that will exclude errored requests from valid events filter : ( Optional ) A prometheus filter string using concatenated labels","title":"Options"},{"location":"sli-plugins/istio-v1-latency/#metric-requirements","text":"istio_request_duration_milliseconds_bucket : From istio . istio_request_duration_milliseconds_count : From istio .","title":"Metric requirements"},{"location":"sli-plugins/istio-v1-latency/#usage-examples","text":"","title":"Usage examples"},{"location":"sli-plugins/istio-v1-latency/#without-filter","text":"sli : plugin : id : \"sloth-common/istio/v1/latency\" options : namespace : \"default\" service : \"test\" bucket : \"300\"","title":"Without filter"},{"location":"sli-plugins/istio-v1-latency/#with-filters","text":"sli : plugin : id : \"sloth-common/istio/v1/latency\" options : namespace : \"default\" service : \"test\" bucket : \"300\" filter : request_protocol=\"http\"","title":"With filters"},{"location":"sli-plugins/istio-v1-latency/#excluding-errors-5xx","text":"sli : plugin : id : \"sloth-common/istio/v1/latency\" options : namespace : \"default\" service : \"test\" bucket : \"300\" filter : request_protocol=\"http\" exclude_errors : true","title":"Excluding errors (5xx)"},{"location":"sli-plugins/kubernetes-apiserver-availability/","text":"Kubernetes apiserver availability \u00b6 Availability plugin for the Kubernetes apiserver. Uses the API HTTP response status codes to measure the events as good or bad. It counts an error event when HTTP response status code is >=500 or 429. In other words, it counts as good events the <500 and !429 HTTP response status codes. Options \u00b6 filter : ( Optional ) A prometheus filter string using concatenated labels (e.g: job=\"k8sapiserver\",env=\"production\",cluster=\"k8s-42\" ) Metric requirements \u00b6 apiserver_request_total . Usage examples \u00b6 Without filter \u00b6 sli : plugin : id : \"sloth-common/kubernetes/apiserver/availability\" With custom filter \u00b6 sli : plugin : id : \"sloth-common/kubernetes/apiserver/availability\" options : filter : job=\"k8sapiserver\",env=\"production\",cluster=\"k8s-42\"","title":"Kubernetes apiserver availability"},{"location":"sli-plugins/kubernetes-apiserver-availability/#kubernetes-apiserver-availability","text":"Availability plugin for the Kubernetes apiserver. Uses the API HTTP response status codes to measure the events as good or bad. It counts an error event when HTTP response status code is >=500 or 429. In other words, it counts as good events the <500 and !429 HTTP response status codes.","title":"Kubernetes apiserver availability"},{"location":"sli-plugins/kubernetes-apiserver-availability/#options","text":"filter : ( Optional ) A prometheus filter string using concatenated labels (e.g: job=\"k8sapiserver\",env=\"production\",cluster=\"k8s-42\" )","title":"Options"},{"location":"sli-plugins/kubernetes-apiserver-availability/#metric-requirements","text":"apiserver_request_total .","title":"Metric requirements"},{"location":"sli-plugins/kubernetes-apiserver-availability/#usage-examples","text":"","title":"Usage examples"},{"location":"sli-plugins/kubernetes-apiserver-availability/#without-filter","text":"sli : plugin : id : \"sloth-common/kubernetes/apiserver/availability\"","title":"Without filter"},{"location":"sli-plugins/kubernetes-apiserver-availability/#with-custom-filter","text":"sli : plugin : id : \"sloth-common/kubernetes/apiserver/availability\" options : filter : job=\"k8sapiserver\",env=\"production\",cluster=\"k8s-42\"","title":"With custom filter"},{"location":"sli-plugins/kubernetes-apiserver-latency/","text":"Kubernetes apiserver latency \u00b6 Latency plugin for the Kubernetes apiserver. Uses the API HTTP response histogram to measure the events as good or bad. It counts as error events that don't fall in the provided bucket. For example if the bucket is 0.2 , We will measure as an error, the requests that fall in the buckets greater than 0.2 , in other words, that took longer than 200ms . Options \u00b6 bucket : ( Required ) The max latency allowed hitogram bucket. filter : ( Optional ) A prometheus filter string using concatenated labels (e.g: job=\"k8sapiserver\",env=\"production\",cluster=\"k8s-42\" ) Metric requirements \u00b6 apiserver_request_duration_seconds_count . apiserver_request_duration_seconds_bucket . Usage examples \u00b6 Don't allow requests >50ms \u00b6 sli : plugin : id : \"sloth-common/kubernetes/apiserver/latency\" options : bucket : \"0.05\" Don't allow requests >200ms \u00b6 sli : plugin : id : \"sloth-common/kubernetes/apiserver/latency\" options : bucket : \"0.2\" Don't allow requests >1s \u00b6 sli : plugin : id : \"sloth-common/kubernetes/apiserver/latency\" options : bucket : \"1\" With custom filter \u00b6 sli : plugin : id : \"sloth-common/kubernetes/apiserver/latency\" options : bucket : \"0.2\" filter : job=\"k8sapiserver\",env=\"production\",cluster=\"k8s-42\"","title":"Kubernetes apiserver latency"},{"location":"sli-plugins/kubernetes-apiserver-latency/#kubernetes-apiserver-latency","text":"Latency plugin for the Kubernetes apiserver. Uses the API HTTP response histogram to measure the events as good or bad. It counts as error events that don't fall in the provided bucket. For example if the bucket is 0.2 , We will measure as an error, the requests that fall in the buckets greater than 0.2 , in other words, that took longer than 200ms .","title":"Kubernetes apiserver latency"},{"location":"sli-plugins/kubernetes-apiserver-latency/#options","text":"bucket : ( Required ) The max latency allowed hitogram bucket. filter : ( Optional ) A prometheus filter string using concatenated labels (e.g: job=\"k8sapiserver\",env=\"production\",cluster=\"k8s-42\" )","title":"Options"},{"location":"sli-plugins/kubernetes-apiserver-latency/#metric-requirements","text":"apiserver_request_duration_seconds_count . apiserver_request_duration_seconds_bucket .","title":"Metric requirements"},{"location":"sli-plugins/kubernetes-apiserver-latency/#usage-examples","text":"","title":"Usage examples"},{"location":"sli-plugins/kubernetes-apiserver-latency/#dont-allow-requests-50ms","text":"sli : plugin : id : \"sloth-common/kubernetes/apiserver/latency\" options : bucket : \"0.05\"","title":"Don't allow requests &gt;50ms"},{"location":"sli-plugins/kubernetes-apiserver-latency/#dont-allow-requests-200ms","text":"sli : plugin : id : \"sloth-common/kubernetes/apiserver/latency\" options : bucket : \"0.2\"","title":"Don't allow requests &gt;200ms"},{"location":"sli-plugins/kubernetes-apiserver-latency/#dont-allow-requests-1s","text":"sli : plugin : id : \"sloth-common/kubernetes/apiserver/latency\" options : bucket : \"1\"","title":"Don't allow requests &gt;1s"},{"location":"sli-plugins/kubernetes-apiserver-latency/#with-custom-filter","text":"sli : plugin : id : \"sloth-common/kubernetes/apiserver/latency\" options : bucket : \"0.2\" filter : job=\"k8sapiserver\",env=\"production\",cluster=\"k8s-42\"","title":"With custom filter"},{"location":"sli-plugins/kubernetes-kooper-availability/","text":"Kubernetes Kooper availability \u00b6 Availability plugin for the Kubernetes Kooper controller/operator library. Kooper library tracks the retries. These retries will be subtracted from the total events, so the number of retries doesn't affect the error ratio. Kooper retries are processed as a correct metrics. Options \u00b6 controller : ( Required ) The controller being measured. filter : ( Optional ) Prometheus extra label filter. Metric requirements \u00b6 kooper_controller_processed_event_duration_seconds_count . kooper_controller_queued_events_total . Usage examples \u00b6 Without filter \u00b6 sli : plugin : id : \"sloth-common/kubernetes/kooper/availability\" options : controller : \"sloth\" With filter \u00b6 sli : plugin : id : \"sloth-common/kubernetes/kooper/availability\" options : controller : \"sloth\" filter : job=\"svc1\",env=\"prod\"","title":"Kubernetes Kooper availability"},{"location":"sli-plugins/kubernetes-kooper-availability/#kubernetes-kooper-availability","text":"Availability plugin for the Kubernetes Kooper controller/operator library. Kooper library tracks the retries. These retries will be subtracted from the total events, so the number of retries doesn't affect the error ratio. Kooper retries are processed as a correct metrics.","title":"Kubernetes Kooper availability"},{"location":"sli-plugins/kubernetes-kooper-availability/#options","text":"controller : ( Required ) The controller being measured. filter : ( Optional ) Prometheus extra label filter.","title":"Options"},{"location":"sli-plugins/kubernetes-kooper-availability/#metric-requirements","text":"kooper_controller_processed_event_duration_seconds_count . kooper_controller_queued_events_total .","title":"Metric requirements"},{"location":"sli-plugins/kubernetes-kooper-availability/#usage-examples","text":"","title":"Usage examples"},{"location":"sli-plugins/kubernetes-kooper-availability/#without-filter","text":"sli : plugin : id : \"sloth-common/kubernetes/kooper/availability\" options : controller : \"sloth\"","title":"Without filter"},{"location":"sli-plugins/kubernetes-kooper-availability/#with-filter","text":"sli : plugin : id : \"sloth-common/kubernetes/kooper/availability\" options : controller : \"sloth\" filter : job=\"svc1\",env=\"prod\"","title":"With filter"},{"location":"sli-plugins/kubernetes-kooper-latency/","text":"Kubernetes Kooper latency \u00b6 Latency plugin for the Kubernetes Kooper controller/operator library. This SLI will measure the latency of handling events/k8s objects on the Kooper controller handlers. Options \u00b6 controller : ( Required ) The controller being measured. bucket : ( Required ) The max latency allowed histogram bucket. filter : ( Optional ) Prometheus extra label filter. Metric requirements \u00b6 kooper_controller_processed_event_duration_seconds_bucket . kooper_controller_processed_event_duration_seconds_count . Usage examples \u00b6 Without filter \u00b6 sli : plugin : id : \"sloth-common/kubernetes/kooper/latency\" options : controller : \"sloth\" bucket : \"0.25\" With filter \u00b6 sli : plugin : id : \"sloth-common/kubernetes/kooper/latency\" options : controller : \"sloth\" bucket : \"0.25\" filter : job=\"svc1\",env=\"prod\"","title":"Kubernetes Kooper latency"},{"location":"sli-plugins/kubernetes-kooper-latency/#kubernetes-kooper-latency","text":"Latency plugin for the Kubernetes Kooper controller/operator library. This SLI will measure the latency of handling events/k8s objects on the Kooper controller handlers.","title":"Kubernetes Kooper latency"},{"location":"sli-plugins/kubernetes-kooper-latency/#options","text":"controller : ( Required ) The controller being measured. bucket : ( Required ) The max latency allowed histogram bucket. filter : ( Optional ) Prometheus extra label filter.","title":"Options"},{"location":"sli-plugins/kubernetes-kooper-latency/#metric-requirements","text":"kooper_controller_processed_event_duration_seconds_bucket . kooper_controller_processed_event_duration_seconds_count .","title":"Metric requirements"},{"location":"sli-plugins/kubernetes-kooper-latency/#usage-examples","text":"","title":"Usage examples"},{"location":"sli-plugins/kubernetes-kooper-latency/#without-filter","text":"sli : plugin : id : \"sloth-common/kubernetes/kooper/latency\" options : controller : \"sloth\" bucket : \"0.25\"","title":"Without filter"},{"location":"sli-plugins/kubernetes-kooper-latency/#with-filter","text":"sli : plugin : id : \"sloth-common/kubernetes/kooper/latency\" options : controller : \"sloth\" bucket : \"0.25\" filter : job=\"svc1\",env=\"prod\"","title":"With filter"},{"location":"sli-plugins/kubernetes-kooper-queuecongestion/","text":"Kubernetes Kooper Queue congestion \u00b6 Queue congestion plugin for the Kubernetes Kooper controller/operator library. This SLI will measure if there is a congestion on the event queue based on the duration an event is hold in the queue before being processed. Options \u00b6 controller : ( Required ) The controller being measured. bucket : ( Required ) The max latency allowed hitogram bucket. filter : ( Optional ) Prometheus extra label filter. Metric requirements \u00b6 kooper_controller_event_in_queue_duration_seconds_count . kooper_controller_event_in_queue_duration_seconds_bucket . Usage examples \u00b6 Without filter \u00b6 sli : plugin : id : \"sloth-common/kubernetes/kooper/queue-congestion\" options : controller : \"sloth\" bucket : \"0.25\" With filter \u00b6 sli : plugin : id : \"sloth-common/kubernetes/kooper/queue-congestion\" options : controller : \"sloth\" bucket : \"0.25\" filter : job=\"svc1\",env=\"prod\"","title":"Kubernetes Kooper Queue congestion"},{"location":"sli-plugins/kubernetes-kooper-queuecongestion/#kubernetes-kooper-queue-congestion","text":"Queue congestion plugin for the Kubernetes Kooper controller/operator library. This SLI will measure if there is a congestion on the event queue based on the duration an event is hold in the queue before being processed.","title":"Kubernetes Kooper Queue congestion"},{"location":"sli-plugins/kubernetes-kooper-queuecongestion/#options","text":"controller : ( Required ) The controller being measured. bucket : ( Required ) The max latency allowed hitogram bucket. filter : ( Optional ) Prometheus extra label filter.","title":"Options"},{"location":"sli-plugins/kubernetes-kooper-queuecongestion/#metric-requirements","text":"kooper_controller_event_in_queue_duration_seconds_count . kooper_controller_event_in_queue_duration_seconds_bucket .","title":"Metric requirements"},{"location":"sli-plugins/kubernetes-kooper-queuecongestion/#usage-examples","text":"","title":"Usage examples"},{"location":"sli-plugins/kubernetes-kooper-queuecongestion/#without-filter","text":"sli : plugin : id : \"sloth-common/kubernetes/kooper/queue-congestion\" options : controller : \"sloth\" bucket : \"0.25\"","title":"Without filter"},{"location":"sli-plugins/kubernetes-kooper-queuecongestion/#with-filter","text":"sli : plugin : id : \"sloth-common/kubernetes/kooper/queue-congestion\" options : controller : \"sloth\" bucket : \"0.25\" filter : job=\"svc1\",env=\"prod\"","title":"With filter"},{"location":"sli-plugins/noop/","text":"Noop \u00b6 A plugin that always returns a queyr that will return 0. the aim of this plugin is to use as a placeholder and example to create other plugins. Options \u00b6 Doesn't have any options. Metric requirements \u00b6 Doesn't have any metric requirements. Usage examples \u00b6 #... sli : plugin : id : \"sloth-common/noop\"","title":"Noop"},{"location":"sli-plugins/noop/#noop","text":"A plugin that always returns a queyr that will return 0. the aim of this plugin is to use as a placeholder and example to create other plugins.","title":"Noop"},{"location":"sli-plugins/noop/#options","text":"Doesn't have any options.","title":"Options"},{"location":"sli-plugins/noop/#metric-requirements","text":"Doesn't have any metric requirements.","title":"Metric requirements"},{"location":"sli-plugins/noop/#usage-examples","text":"#... sli : plugin : id : \"sloth-common/noop\"","title":"Usage examples"},{"location":"sli-plugins/prometheus-rules-evalavailability/","text":"Prometheus rules evaluation availability \u00b6 Availability plugin for the Prometheus rules evaluation. Options \u00b6 filter : ( Optional ) Prometheus extra label filter. Metric requirements \u00b6 prometheus_rule_evaluation_failures_total . prometheus_rule_evaluations_total Usage examples \u00b6 Without filter \u00b6 sli : plugin : id : \"sloth-common/prometheus/rules/eval-availability\" With filter \u00b6 sli : plugin : id : \"sloth-common/prometheus/rules/eval-availability\" options : filter : job=\"svc1\",env=\"prod\"","title":"Prometheus rules evaluation availability"},{"location":"sli-plugins/prometheus-rules-evalavailability/#prometheus-rules-evaluation-availability","text":"Availability plugin for the Prometheus rules evaluation.","title":"Prometheus rules evaluation availability"},{"location":"sli-plugins/prometheus-rules-evalavailability/#options","text":"filter : ( Optional ) Prometheus extra label filter.","title":"Options"},{"location":"sli-plugins/prometheus-rules-evalavailability/#metric-requirements","text":"prometheus_rule_evaluation_failures_total . prometheus_rule_evaluations_total","title":"Metric requirements"},{"location":"sli-plugins/prometheus-rules-evalavailability/#usage-examples","text":"","title":"Usage examples"},{"location":"sli-plugins/prometheus-rules-evalavailability/#without-filter","text":"sli : plugin : id : \"sloth-common/prometheus/rules/eval-availability\"","title":"Without filter"},{"location":"sli-plugins/prometheus-rules-evalavailability/#with-filter","text":"sli : plugin : id : \"sloth-common/prometheus/rules/eval-availability\" options : filter : job=\"svc1\",env=\"prod\"","title":"With filter"},{"location":"sli-plugins/prometheus-targets-availability/","text":"Prometheus Target availability \u00b6 Availability plugin for the Prometheus targets. A target will be counted as an error when is not up to be scraped by Prometheus. Options \u00b6 filter : ( Optional ) Prometheus extra label filter. Metric requirements \u00b6 up . Usage examples \u00b6 Without filter \u00b6 sli : plugin : id : \"sloth-common/prometheus/targets/availability\" With filter \u00b6 sli : plugin : id : \"sloth-common/prometheus/targets/availability\" options : filter : job=\"svc1\",env=\"prod\"","title":"Prometheus Target availability"},{"location":"sli-plugins/prometheus-targets-availability/#prometheus-target-availability","text":"Availability plugin for the Prometheus targets. A target will be counted as an error when is not up to be scraped by Prometheus.","title":"Prometheus Target availability"},{"location":"sli-plugins/prometheus-targets-availability/#options","text":"filter : ( Optional ) Prometheus extra label filter.","title":"Options"},{"location":"sli-plugins/prometheus-targets-availability/#metric-requirements","text":"up .","title":"Metric requirements"},{"location":"sli-plugins/prometheus-targets-availability/#usage-examples","text":"","title":"Usage examples"},{"location":"sli-plugins/prometheus-targets-availability/#without-filter","text":"sli : plugin : id : \"sloth-common/prometheus/targets/availability\"","title":"Without filter"},{"location":"sli-plugins/prometheus-targets-availability/#with-filter","text":"sli : plugin : id : \"sloth-common/prometheus/targets/availability\" options : filter : job=\"svc1\",env=\"prod\"","title":"With filter"},{"location":"sli-plugins/slok-go-http-metrics-availability/","text":"slok/go-http-metrics availability \u00b6 Availability plugin for slok/go-http-metrics . Uses the API HTTP response status codes to measure the events as good or bad. It counts an error event when HTTP response status code is >=500 or 429. In other words, it counts as good events the <500 and !429 HTTP response status codes. Options \u00b6 filter : ( Required ) A prometheus filter string using concatenated labels (e.g: exported_service=\"alertmanager-api\",service=\"alertgram\" ) Metric requirements \u00b6 http_request_duration_seconds_count : From slok/go-http-metrics . Usage examples \u00b6 sli : plugin : id : \"sloth-common/slok-go-http-metrics/availability\" options : filter : exported_service=\"alertmanager-api\",service=\"alertgram\"","title":"slok/go-http-metrics availability"},{"location":"sli-plugins/slok-go-http-metrics-availability/#slokgo-http-metrics-availability","text":"Availability plugin for slok/go-http-metrics . Uses the API HTTP response status codes to measure the events as good or bad. It counts an error event when HTTP response status code is >=500 or 429. In other words, it counts as good events the <500 and !429 HTTP response status codes.","title":"slok/go-http-metrics availability"},{"location":"sli-plugins/slok-go-http-metrics-availability/#options","text":"filter : ( Required ) A prometheus filter string using concatenated labels (e.g: exported_service=\"alertmanager-api\",service=\"alertgram\" )","title":"Options"},{"location":"sli-plugins/slok-go-http-metrics-availability/#metric-requirements","text":"http_request_duration_seconds_count : From slok/go-http-metrics .","title":"Metric requirements"},{"location":"sli-plugins/slok-go-http-metrics-availability/#usage-examples","text":"sli : plugin : id : \"sloth-common/slok-go-http-metrics/availability\" options : filter : exported_service=\"alertmanager-api\",service=\"alertgram\"","title":"Usage examples"},{"location":"sli-plugins/slok-go-http-metrics-latency/","text":"slok/go-http-metrics latency \u00b6 Latency plugin for slok/go-http-metrics . Uses the HTTP response histogram to measure the events as good or bad. It counts as error events that don't fall in the provided bucket. For example if the bucket is 0.25 , We will measure as an error, the requests that fall in the buckets greater than 0.25 , in other words, that took longer than 250ms . Options \u00b6 bucket : ( Required ) The max latency allowed histogram bucket. filter : ( Required ) A prometheus filter string using concatenated labels (e.g: exported_service=\"alertmanager-api\",service=\"alertgram\" ) exclude_errors : ( Optional ) Boolean that will exclude errored requests from valid events when measuring latency requests. Metric requirements \u00b6 http_request_duration_seconds_bucket : From slok/go-http-metrics . http_request_duration_seconds_count : From slok/go-http-metrics . Usage examples \u00b6 Default \u00b6 sli : plugin : id : \"sloth-common/slok-go-http-metrics/latency\" options : filter : exported_service=\"alertmanager-api\",service=\"alertgram\" bucket : \"1\" Excluding errors (5xx) \u00b6 sli : plugin : id : \"sloth-common/slok-go-http-metrics/latency\" options : filter : exported_service=\"alertmanager-api\",service=\"alertgram\" bucket : \"0.25\" exclude_errors : \"true\"","title":"slok/go-http-metrics latency"},{"location":"sli-plugins/slok-go-http-metrics-latency/#slokgo-http-metrics-latency","text":"Latency plugin for slok/go-http-metrics . Uses the HTTP response histogram to measure the events as good or bad. It counts as error events that don't fall in the provided bucket. For example if the bucket is 0.25 , We will measure as an error, the requests that fall in the buckets greater than 0.25 , in other words, that took longer than 250ms .","title":"slok/go-http-metrics latency"},{"location":"sli-plugins/slok-go-http-metrics-latency/#options","text":"bucket : ( Required ) The max latency allowed histogram bucket. filter : ( Required ) A prometheus filter string using concatenated labels (e.g: exported_service=\"alertmanager-api\",service=\"alertgram\" ) exclude_errors : ( Optional ) Boolean that will exclude errored requests from valid events when measuring latency requests.","title":"Options"},{"location":"sli-plugins/slok-go-http-metrics-latency/#metric-requirements","text":"http_request_duration_seconds_bucket : From slok/go-http-metrics . http_request_duration_seconds_count : From slok/go-http-metrics .","title":"Metric requirements"},{"location":"sli-plugins/slok-go-http-metrics-latency/#usage-examples","text":"","title":"Usage examples"},{"location":"sli-plugins/slok-go-http-metrics-latency/#default","text":"sli : plugin : id : \"sloth-common/slok-go-http-metrics/latency\" options : filter : exported_service=\"alertmanager-api\",service=\"alertgram\" bucket : \"1\"","title":"Default"},{"location":"sli-plugins/slok-go-http-metrics-latency/#excluding-errors-5xx","text":"sli : plugin : id : \"sloth-common/slok-go-http-metrics/latency\" options : filter : exported_service=\"alertmanager-api\",service=\"alertgram\" bucket : \"0.25\" exclude_errors : \"true\"","title":"Excluding errors (5xx)"},{"location":"sli-plugins/traefik-v1-availability/","text":"Traefik V1 availability \u00b6 Availability plugin for Traefik V1 backends. Uses Traefik v1 backend metrics to get the correct and invalid availability on the serving backends. Options \u00b6 filter : ( Optional ) A prometheus filter string using concatenated labels backend_regex : ( required ) Regex to match the traefik backends. Metric requirements \u00b6 traefik_backend_requests_total : From traefik . Usage examples \u00b6 Without filter \u00b6 sli : plugin : id : \"sloth-common/traefik/v1/availability\" options : backend_regex : \"^github.com/slok/sloth/?$\" With filters \u00b6 sli : plugin : id : \"sloth-common/traefik/v1/availability\" options : backend_regex : \"^github.com/slok/sloth/?$\" filter : method=\"GET\"","title":"Traefik V1 availability"},{"location":"sli-plugins/traefik-v1-availability/#traefik-v1-availability","text":"Availability plugin for Traefik V1 backends. Uses Traefik v1 backend metrics to get the correct and invalid availability on the serving backends.","title":"Traefik V1 availability"},{"location":"sli-plugins/traefik-v1-availability/#options","text":"filter : ( Optional ) A prometheus filter string using concatenated labels backend_regex : ( required ) Regex to match the traefik backends.","title":"Options"},{"location":"sli-plugins/traefik-v1-availability/#metric-requirements","text":"traefik_backend_requests_total : From traefik .","title":"Metric requirements"},{"location":"sli-plugins/traefik-v1-availability/#usage-examples","text":"","title":"Usage examples"},{"location":"sli-plugins/traefik-v1-availability/#without-filter","text":"sli : plugin : id : \"sloth-common/traefik/v1/availability\" options : backend_regex : \"^github.com/slok/sloth/?$\"","title":"Without filter"},{"location":"sli-plugins/traefik-v1-availability/#with-filters","text":"sli : plugin : id : \"sloth-common/traefik/v1/availability\" options : backend_regex : \"^github.com/slok/sloth/?$\" filter : method=\"GET\"","title":"With filters"},{"location":"sli-plugins/traefik-v1-latency/","text":"Traefik V1 latency \u00b6 Latency plugin for Traefik V1 backends. Uses Traefik v1 backend metrics to get the latency on the serving backends. Options \u00b6 bucket : ( Required ) The max latency allowed histogram bucket. backend_regex : ( required ) Regex to match the traefik backends. filter : ( Optional ) A prometheus filter string using concatenated labels exclude_errors : ( Optional ) Boolean that will exclude errored requests from valid events when measuring latency requests. Metric requirements \u00b6 traefik_backend_request_duration_seconds_bucket : From traefik . traefik_backend_request_duration_seconds_count : From traefik . Usage examples \u00b6 Without filter \u00b6 sli : plugin : id : \"sloth-common/traefik/v1/latency\" options : backend_regex : \"^github.com/slok/sloth/?$\" bucket : \"0.3\" With filters \u00b6 sli : plugin : id : \"sloth-common/traefik/v1/latency\" options : backend_regex : \"^github.com/slok/sloth/?$\" bucket : \"0.3\" filter : method=\"GET\" Excluding errors (5xx) \u00b6 sli : plugin : id : \"sloth-common/traefik/v1/latency\" options : backend_regex : \"^github.com/slok/sloth/?$\" bucket : \"0.3\" filter : method=\"GET\" exclude_errors : \"true\"","title":"Traefik V1 latency"},{"location":"sli-plugins/traefik-v1-latency/#traefik-v1-latency","text":"Latency plugin for Traefik V1 backends. Uses Traefik v1 backend metrics to get the latency on the serving backends.","title":"Traefik V1 latency"},{"location":"sli-plugins/traefik-v1-latency/#options","text":"bucket : ( Required ) The max latency allowed histogram bucket. backend_regex : ( required ) Regex to match the traefik backends. filter : ( Optional ) A prometheus filter string using concatenated labels exclude_errors : ( Optional ) Boolean that will exclude errored requests from valid events when measuring latency requests.","title":"Options"},{"location":"sli-plugins/traefik-v1-latency/#metric-requirements","text":"traefik_backend_request_duration_seconds_bucket : From traefik . traefik_backend_request_duration_seconds_count : From traefik .","title":"Metric requirements"},{"location":"sli-plugins/traefik-v1-latency/#usage-examples","text":"","title":"Usage examples"},{"location":"sli-plugins/traefik-v1-latency/#without-filter","text":"sli : plugin : id : \"sloth-common/traefik/v1/latency\" options : backend_regex : \"^github.com/slok/sloth/?$\" bucket : \"0.3\"","title":"Without filter"},{"location":"sli-plugins/traefik-v1-latency/#with-filters","text":"sli : plugin : id : \"sloth-common/traefik/v1/latency\" options : backend_regex : \"^github.com/slok/sloth/?$\" bucket : \"0.3\" filter : method=\"GET\"","title":"With filters"},{"location":"sli-plugins/traefik-v1-latency/#excluding-errors-5xx","text":"sli : plugin : id : \"sloth-common/traefik/v1/latency\" options : backend_regex : \"^github.com/slok/sloth/?$\" bucket : \"0.3\" filter : method=\"GET\" exclude_errors : \"true\"","title":"Excluding errors (5xx)"},{"location":"sli-plugins/traefik-v2-availability/","text":"Traefik V2 availability \u00b6 Availability plugin for Traefik V2 services. Uses Traefik v2 service metrics to get the correct and invalid availability on the serving services. Options \u00b6 filter : ( Optional ) A prometheus filter string using concatenated labels service_name_regex : ( required ) Regex to match the traefik services. Metric requirements \u00b6 traefik_service_requests_total : From traefik . Usage examples \u00b6 Without filter \u00b6 sli : plugin : id : \"sloth-common/traefik/v2/availability\" options : service_name_regex : \"^default-slok-sloth$\" With filters \u00b6 sli : plugin : id : \"sloth-common/traefik/v2/availability\" options : service_name_regex : \"^default-slok-sloth$\" filter : method=\"GET\"","title":"Traefik V2 availability"},{"location":"sli-plugins/traefik-v2-availability/#traefik-v2-availability","text":"Availability plugin for Traefik V2 services. Uses Traefik v2 service metrics to get the correct and invalid availability on the serving services.","title":"Traefik V2 availability"},{"location":"sli-plugins/traefik-v2-availability/#options","text":"filter : ( Optional ) A prometheus filter string using concatenated labels service_name_regex : ( required ) Regex to match the traefik services.","title":"Options"},{"location":"sli-plugins/traefik-v2-availability/#metric-requirements","text":"traefik_service_requests_total : From traefik .","title":"Metric requirements"},{"location":"sli-plugins/traefik-v2-availability/#usage-examples","text":"","title":"Usage examples"},{"location":"sli-plugins/traefik-v2-availability/#without-filter","text":"sli : plugin : id : \"sloth-common/traefik/v2/availability\" options : service_name_regex : \"^default-slok-sloth$\"","title":"Without filter"},{"location":"sli-plugins/traefik-v2-availability/#with-filters","text":"sli : plugin : id : \"sloth-common/traefik/v2/availability\" options : service_name_regex : \"^default-slok-sloth$\" filter : method=\"GET\"","title":"With filters"},{"location":"sli-plugins/traefik-v2-latency/","text":"Traefik V2 latency \u00b6 Latency plugin for Traefik V2 services. Uses Traefik v2 service metrics to get the latency on the serving services. Options \u00b6 bucket : ( Required ) The max latency allowed histogram bucket. service_name_regex : ( required ) Regex to match the traefik service. filter : ( Optional ) A prometheus filter string using concatenated labels exclude_errors : ( Optional ) Boolean that will exclude errored requests from valid events when measuring latency requests. Metric requirements \u00b6 traefik_service_request_duration_seconds_bucket : From traefik . traefik_service_request_duration_seconds_count : From traefik . Usage examples \u00b6 Without filter \u00b6 sli : plugin : id : \"sloth-common/traefik/v2/latency\" options : service_name_regex : \"^default-slok-sloth$\" bucket : \"0.3\" With filters \u00b6 sli : plugin : id : \"sloth-common/traefik/v2/latency\" options : service_name_regex : \"^default-slok-sloth$\" bucket : \"0.3\" filter : method=\"GET\" Excluding errors (5xx) \u00b6 sli : plugin : id : \"sloth-common/traefik/v2/latency\" options : service_name_regex : \"^default-slok-sloth$\" bucket : \"0.3\" filter : method=\"GET\" exclude_errors : \"true\"","title":"Traefik V2 latency"},{"location":"sli-plugins/traefik-v2-latency/#traefik-v2-latency","text":"Latency plugin for Traefik V2 services. Uses Traefik v2 service metrics to get the latency on the serving services.","title":"Traefik V2 latency"},{"location":"sli-plugins/traefik-v2-latency/#options","text":"bucket : ( Required ) The max latency allowed histogram bucket. service_name_regex : ( required ) Regex to match the traefik service. filter : ( Optional ) A prometheus filter string using concatenated labels exclude_errors : ( Optional ) Boolean that will exclude errored requests from valid events when measuring latency requests.","title":"Options"},{"location":"sli-plugins/traefik-v2-latency/#metric-requirements","text":"traefik_service_request_duration_seconds_bucket : From traefik . traefik_service_request_duration_seconds_count : From traefik .","title":"Metric requirements"},{"location":"sli-plugins/traefik-v2-latency/#usage-examples","text":"","title":"Usage examples"},{"location":"sli-plugins/traefik-v2-latency/#without-filter","text":"sli : plugin : id : \"sloth-common/traefik/v2/latency\" options : service_name_regex : \"^default-slok-sloth$\" bucket : \"0.3\"","title":"Without filter"},{"location":"sli-plugins/traefik-v2-latency/#with-filters","text":"sli : plugin : id : \"sloth-common/traefik/v2/latency\" options : service_name_regex : \"^default-slok-sloth$\" bucket : \"0.3\" filter : method=\"GET\"","title":"With filters"},{"location":"sli-plugins/traefik-v2-latency/#excluding-errors-5xx","text":"sli : plugin : id : \"sloth-common/traefik/v2/latency\" options : service_name_regex : \"^default-slok-sloth$\" bucket : \"0.3\" filter : method=\"GET\" exclude_errors : \"true\"","title":"Excluding errors (5xx)"},{"location":"specs/default/","text":"Can't be used with Kubernetes controller This spec can't be used with Kubernetes CRDs, use Kubernetes spec instead. This is the default format for Sloth, doesn't depend on Kubernetes CRDs or anything. Normally this format is used when the integration you want is a vanilla Prometheus integration with raw Prometheus rules, so, this will generate the prometheus recording and alerting rules in Standard Prometheus YAML format. Spec Examples Example $ sloth generate -i ./examples/home-wifi.yml -o /tmp/home-wifi.yml INFO [ 0000 ] Generating from Prometheus spec version = v0.1.0-43-g5715af5 INFO [ 0000 ] Multiwindow-multiburn alerts generated slo = home-wifi-good-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] SLI recording rules generated rules = 8 slo = home-wifi-good-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] Metadata recording rules generated rules = 7 slo = home-wifi-good-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] SLO alert rules generated rules = 2 slo = home-wifi-good-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] Multiwindow-multiburn alerts generated slo = home-wifi-risk-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] SLI recording rules generated rules = 8 slo = home-wifi-risk-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] Metadata recording rules generated rules = 7 slo = home-wifi-risk-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] SLO alert rules generated rules = 2 slo = home-wifi-risk-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] Prometheus rules written format = yaml groups = 6 out = /tmp/home-wifi.yml svc = storage.IOWriter version = v0.1.0-43-g5715af5","title":"Default"},{"location":"specs/kubernetes/","text":"Compatible with CLI This spec can be used in the same way the default spec is used with the CLI. Compatible with Kubernetes This spec can be used as a Kubernetes resource using CR (needs CRD registered on Kubernetes APIserver). Kubernetes format means that the SLOs use a Kubernetes style spec. Is very similar to the default one, except that this format can be used in two ways, the regular CLI mode, and in Kubernetes controller mode using CRs. Check related resources: Spec . Examples K8s client . CRD manifest . Will generate from a Sloth CRD spec into [Prometheus-operator][crd rules][prom-op-rules]. This generates the prometheus operator CRDs based on the Sloth CRD template. Example $ sloth generate -i ./examples/k8s-home-wifi.yml -o /tmp/k8s-home-wifi.yml INFO [ 0000 ] Generating from Kubernetes Prometheus spec version = v0.1.0-43-g5715af5 INFO [ 0000 ] Multiwindow-multiburn alerts generated slo = home-wifi-good-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] SLI recording rules generated rules = 8 slo = home-wifi-good-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] Metadata recording rules generated rules = 7 slo = home-wifi-good-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] SLO alert rules generated rules = 2 slo = home-wifi-good-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] Multiwindow-multiburn alerts generated slo = home-wifi-risk-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] SLI recording rules generated rules = 8 slo = home-wifi-risk-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] Metadata recording rules generated rules = 7 slo = home-wifi-risk-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] SLO alert rules generated rules = 2 slo = home-wifi-risk-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5","title":"Kubernetes"},{"location":"specs/openslo/","text":"Only Compatible with CLI, Not Kubernetes compatible This spec can't be used with Kubernetes CRDs, use Kubernetes spec instead. Sloth supports OpenSLO v1alpha spec, however we need to take into account that it has some restrictions: OpenSLO time window restricted to 30 days. Only Objective ratio metrics are supported. Only Prometheus and PromQL query types are supported. Configuration fields not required by Sloth will be ignored. Regarding Sloth features, OpenSLO spec doesn't support all of the sloth features: No Prometheus labels support. No alerting support. No SLI plugins support. No Kubernetes support (at least until official OpenSLO CRDs are released). Check Examples Example sloth generate -i ./examples/openslo-getting-started.yml -o /tmp/openslo-getting-started.yml INFO [ 0000 ] SLI plugins loaded plugins = 0 svc = storage.FileSLIPlugin version = v0.6.0-8-ga8f37a2 INFO [ 0000 ] Generating from OpenSLO spec version = v0.6.0-8-ga8f37a2 INFO [ 0000 ] Multiwindow-multiburn alerts generated out = /tmp/openslo-getting-started.yml slo = my-service-sloth-slo-my-service-0 svc = generate.prometheus.Service version = v0.6.0-8-ga8f37a2 INFO [ 0000 ] SLI recording rules generated out = /tmp/openslo-getting-started.yml rules = 8 slo = my-service-sloth-slo-my-service-0 svc = generate.prometheus.Service version = v0.6.0-8-ga8f37a2 INFO [ 0000 ] Metadata recording rules generated out = /tmp/openslo-getting-started.yml rules = 7 slo = my-service-sloth-slo-my-service-0 svc = generate.prometheus.Service version = v0.6.0-8-ga8f37a2 INFO [ 0000 ] SLO alert rules generated out = /tmp/openslo-getting-started.yml rules = 0 slo = my-service-sloth-slo-my-service-0 svc = generate.prometheus.Service version = v0.6.0-8-ga8f37a2 INFO [ 0000 ] Prometheus rules written format = yaml groups = 2 out = /tmp/openslo-getting-started.yml svc = storage.IOWriter version = v0.6.0-8-ga8f37a2","title":"OpenSLO"},{"location":"usage/cli/","text":"generate will generate Prometheus rules in different formats based on the specs. This mode only needs the CLI so its very useful for GitOps, CI, scripts or as a CLI on your toolbox. generate command supports multiple spec types and will detect the input spec type based on the spec, accordingly it will generate the output in different formats depending on the loaded spec: Default spec generates vanilla Prometheus rules. Kubernetes spec generates Prometheus operator based CRD Prometheus rules . CLI mode doesn't need CRDs Sloth CRD is NOT required in the cluster because the generation happens offline as a CLI. For controller/operator K8s flow, check Kubernetes controller section. Kubernetes without prometheus-operator In this case, you will need default spec to get vanilla prometheus rules and deploy as you deploy other Prometheus rules in the Kubernetes cluster (e.g. Using configmaps). Kubernetes specs need prometheus-operator CRDs Kubernetes specs generate Prometheus operator Rules CRs, this means that the CRD is required to be registered in the cluster. Disable optimized rules By default Sloth will try optimizing long time windows (e.g 30 day) by sacrificing data precision. If you want to disable this use --disable-optimized-rules . SLO directory discovery If the input and the output is a directory instead of a file, Sloth will discover all SLOs recursively in a directory and output the generated files with the corresponding structure in the output. If you are executing Sloth per file using bash loops, changing to this method is recommended ( >=v0.10.0 ) because it will have a huge impact performance (e.g: CI time). Example $ sloth generate -i ./examples/home-wifi.yml -o /tmp/home-wifi.yml INFO [ 0000 ] Generating from Prometheus spec version = v0.1.0-43-g5715af5 INFO [ 0000 ] Multiwindow-multiburn alerts generated slo = home-wifi-good-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] SLI recording rules generated rules = 8 slo = home-wifi-good-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] Metadata recording rules generated rules = 7 slo = home-wifi-good-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] SLO alert rules generated rules = 2 slo = home-wifi-good-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] Multiwindow-multiburn alerts generated slo = home-wifi-risk-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] SLI recording rules generated rules = 8 slo = home-wifi-risk-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] Metadata recording rules generated rules = 7 slo = home-wifi-risk-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] SLO alert rules generated rules = 2 slo = home-wifi-risk-wifi-client-satisfaction svc = generate.prometheus.Service version = v0.1.0-43-g5715af5 INFO [ 0000 ] Prometheus rules written format = yaml groups = 6 out = /tmp/home-wifi.yml svc = storage.IOWriter version = v0.1.0-43-g5715af5","title":"CLI generate"},{"location":"usage/kubernetes/","text":"kubernetes-controller command runs Sloth as a controller/operator that will react on sloth.slok.dev/v1/PrometheusServiceLevel CRD. In the controller mode, Sloth will be running listneing to Kubernetes Sloth SLO CR events and generate the required prometheus-operator CR rules In the end, the controller mode makes the same work as the CLI however integrates better with a native Kubernetes flow. Sloth CRD is required $ kubectl apply -f ./pkg/kubernetes/gen/crd/sloth.slok.dev_prometheusservicelevels.yaml Prometheus Operator Rules CRD is required $ kubectl apply -f ./test/integration/crd/prometheus-operator-crd.yaml Disable optimized rules By default Sloth will try optimizing long time windows (e.g 30 day) by sacrificing data precision. If you want to disable this use --disable-optimized-rules . Deploying in Kubernetes \u00b6 Check Kubernetes installing section Example # Run sloth controller. $ kubectl create ns monitoring $ kubectl apply -f ./deploy/kubernetes/raw/sloth.yaml # Deploy some SLOs. $ kubectl apply -f ./examples/k8s-getting-started.yml # Get CRs. $ kubectl -n monitoring get slos NAME SERVICE DESIRED SLOS READY SLOS GEN OK GEN AGE AGE sloth-slo-my-se rvice myservice 1 1 true 27s 27s $ kubectl -n monitoring get prometheusrules NAME AGE sloth-slo-my-service 38s","title":"Kubernetes controller"},{"location":"usage/kubernetes/#deploying-in-kubernetes","text":"Check Kubernetes installing section Example # Run sloth controller. $ kubectl create ns monitoring $ kubectl apply -f ./deploy/kubernetes/raw/sloth.yaml # Deploy some SLOs. $ kubectl apply -f ./examples/k8s-getting-started.yml # Get CRs. $ kubectl -n monitoring get slos NAME SERVICE DESIRED SLOS READY SLOS GEN OK GEN AGE AGE sloth-slo-my-se rvice myservice 1 1 true 27s 27s $ kubectl -n monitoring get prometheusrules NAME AGE sloth-slo-my-service 38s","title":"Deploying in Kubernetes"},{"location":"usage/plugins/","text":"SLI plugins are small Go plugins (using Yaegi ) that can be loaded on Sloth start. These plugins can be referenced as an SLI on the SLO specs and will return a raw SLI type. Common plugins \u00b6 Sloth maintains a library with common SLI plugins that can be used on your SLOs or used as examples to develop your own ones. Check plugins source code here . Check the documentation here . Developing plugins \u00b6 prometheus/v1 \u00b6 Developing a prometheus/v1 SLI plugin is very easy, however you need to meet some requirements: The plugin version used as a global called SLIPluginVersion . A plugin ID global called SLIPluginID . A Plugin logic function called SLIPlugin . The plugin must be in a single file named plugin.go . Plugins only can use the Go standard library ( reflect and unsafe packages can't be used). Plugin received options are a map[string]string to avoid interface{} problems on dynamic execution code, the conversion to specific types are responsibility of the plugin. Plugins don't depend on go modules, GOPATH or similar (thanks to the previous requirements). Sloth knows how to autodiscover plugins giving a path ( --sli-plugins-path ), and will load all the discovered ones. A very simple example: from plugins/x/y/plugin.go package testplugin import \"context\" const ( SLIPluginVersion = \"prometheus/v1\" SLIPluginID = \"test_plugin\" ) func SLIPlugin ( ctx context . Context , meta , labels , options map [ string ] string ) ( string , error ) { return \"rate(my_raw_error_ratio_query{}[{{.window}}])\" , nil } Used in SLO spec: version : \"prometheus/v1\" service : \"myservice\" slos : - name : \"some-slo\" objective : 99.9 sli : plugin : id : \"test_plugin\" options : opt1 : \"something\" opt2 : \"something\" alerting : #... On spec load, Sloth will execute the referenced plugins with the options and use the result as a Raw SLI type, the one that returns the error ratio query. Why should I use plugins? \u00b6 By default you shouldn't unless you have scenarios where they can simplify, add security or improve the SLO adoption on the team/company. Some examples: SLI custom validation (parameters, queries...). Company wide precreated SLIs for common used libraries. Complex Prometheus query SLIs. Precreated SLIs for the team or company that normally everyones uses on the SLOs. OSS SLI plugins that come with the apps, frameworks or libraries (e.g Kubernetes apiserver, http framework X...). The company or the team could have a repository with all the shared plugins and everyone could use them and contribute with new ones. Automation power when templates are not enough.","title":"SLI plugins"},{"location":"usage/plugins/#common-plugins","text":"Sloth maintains a library with common SLI plugins that can be used on your SLOs or used as examples to develop your own ones. Check plugins source code here . Check the documentation here .","title":"Common plugins"},{"location":"usage/plugins/#developing-plugins","text":"","title":"Developing plugins"},{"location":"usage/plugins/#prometheusv1","text":"Developing a prometheus/v1 SLI plugin is very easy, however you need to meet some requirements: The plugin version used as a global called SLIPluginVersion . A plugin ID global called SLIPluginID . A Plugin logic function called SLIPlugin . The plugin must be in a single file named plugin.go . Plugins only can use the Go standard library ( reflect and unsafe packages can't be used). Plugin received options are a map[string]string to avoid interface{} problems on dynamic execution code, the conversion to specific types are responsibility of the plugin. Plugins don't depend on go modules, GOPATH or similar (thanks to the previous requirements). Sloth knows how to autodiscover plugins giving a path ( --sli-plugins-path ), and will load all the discovered ones. A very simple example: from plugins/x/y/plugin.go package testplugin import \"context\" const ( SLIPluginVersion = \"prometheus/v1\" SLIPluginID = \"test_plugin\" ) func SLIPlugin ( ctx context . Context , meta , labels , options map [ string ] string ) ( string , error ) { return \"rate(my_raw_error_ratio_query{}[{{.window}}])\" , nil } Used in SLO spec: version : \"prometheus/v1\" service : \"myservice\" slos : - name : \"some-slo\" objective : 99.9 sli : plugin : id : \"test_plugin\" options : opt1 : \"something\" opt2 : \"something\" alerting : #... On spec load, Sloth will execute the referenced plugins with the options and use the result as a Raw SLI type, the one that returns the error ratio query.","title":"prometheus/v1"},{"location":"usage/plugins/#why-should-i-use-plugins","text":"By default you shouldn't unless you have scenarios where they can simplify, add security or improve the SLO adoption on the team/company. Some examples: SLI custom validation (parameters, queries...). Company wide precreated SLIs for common used libraries. Complex Prometheus query SLIs. Precreated SLIs for the team or company that normally everyones uses on the SLOs. OSS SLI plugins that come with the apps, frameworks or libraries (e.g Kubernetes apiserver, http framework X...). The company or the team could have a repository with all the shared plugins and everyone could use them and contribute with new ones. Automation power when templates are not enough.","title":"Why should I use plugins?"},{"location":"usage/slo-period-windows/","text":"Sloth tries simplifying SLO generation and maintainability, thats why uses safe defaults and removes a lot of knobs/settings. If you don't need custom SLO period windows is encouraged that you use Sloth's 30 day default one. Default SLO period catalog \u00b6 Sloth can load a catalog of SLO period windows when it starts. By default Sloth comes with some well known SLO period windows loaded: 30 day: SRE workbook month SLO period. 28 day: Similar to the 30 day but in 4 weeks format. Custom SLO period catalog \u00b6 In case you want to fully customize your SLO period catalog (7 day period, adjust 30 day period alerting windows...). You can use AlertWindows/v1 spec. Sloth will discover all SLO period window specs, load them on the SLO period catalog so the can be use them, by passing --slo-period-windows-path . Some spec examples: 7 day Custom 30 day apiVersion : sloth.slok.dev/v1 kind : AlertWindows spec : sloPeriod : 7d page : quick : errorBudgetPercent : 8 shortWindow : 5m longWindow : 1h slow : errorBudgetPercent : 12.5 shortWindow : 30m longWindow : 6h ticket : quick : errorBudgetPercent : 20 shortWindow : 2h longWindow : 1d slow : errorBudgetPercent : 42 shortWindow : 6h longWindow : 3d apiVersion : sloth.slok.dev/v1 kind : AlertWindows spec : sloPeriod : 30d page : quick : errorBudgetPercent : 1 shortWindow : 2m longWindow : 30m slow : errorBudgetPercent : 2 shortWindow : 15m longWindow : 3h ticket : quick : errorBudgetPercent : 5 shortWindow : 1h longWindow : 12h slow : errorBudgetPercent : 5 shortWindow : 3h longWindow : 36h Multiple Sloth instances with different SLO period windows catalogs and defaults You can have multiple Sloth instances with different default windows (with same or different slo period catalog) so you can have different behavior depending on the SLOs. For example in Kubernetes you can run Sloth using label selectors to include/exclude SLOs that will process. E.g: --label-selector=slo-window=7d --label-selector=slo-window!=7d --label-selector=environment=prod,tenant=5 Selecting default SLO period \u00b6 Kubernetes and raw specs can's select an SLO period using the spec (because of simplicity), so, sloths fallbacks to its default slo period ( 30d ). However, this can be changed using --default-slo-period . Some examples: Use default catalog and default 30 day (this would be the same as not specifying anything): --default-slo-period=30d . Use default catalog with 28 day: --default-slo-period=28d . Use custom catalog with 7 day: --default-slo-period=7d --slo-period-windows-path=/my/custom/slo/catalog . Use custom catalog with 45 day: --default-slo-period=45d --slo-period-windows-path=/my/custom/slo/catalog .","title":"SLO period windows"},{"location":"usage/slo-period-windows/#default-slo-period-catalog","text":"Sloth can load a catalog of SLO period windows when it starts. By default Sloth comes with some well known SLO period windows loaded: 30 day: SRE workbook month SLO period. 28 day: Similar to the 30 day but in 4 weeks format.","title":"Default SLO period catalog"},{"location":"usage/slo-period-windows/#custom-slo-period-catalog","text":"In case you want to fully customize your SLO period catalog (7 day period, adjust 30 day period alerting windows...). You can use AlertWindows/v1 spec. Sloth will discover all SLO period window specs, load them on the SLO period catalog so the can be use them, by passing --slo-period-windows-path . Some spec examples: 7 day Custom 30 day apiVersion : sloth.slok.dev/v1 kind : AlertWindows spec : sloPeriod : 7d page : quick : errorBudgetPercent : 8 shortWindow : 5m longWindow : 1h slow : errorBudgetPercent : 12.5 shortWindow : 30m longWindow : 6h ticket : quick : errorBudgetPercent : 20 shortWindow : 2h longWindow : 1d slow : errorBudgetPercent : 42 shortWindow : 6h longWindow : 3d apiVersion : sloth.slok.dev/v1 kind : AlertWindows spec : sloPeriod : 30d page : quick : errorBudgetPercent : 1 shortWindow : 2m longWindow : 30m slow : errorBudgetPercent : 2 shortWindow : 15m longWindow : 3h ticket : quick : errorBudgetPercent : 5 shortWindow : 1h longWindow : 12h slow : errorBudgetPercent : 5 shortWindow : 3h longWindow : 36h Multiple Sloth instances with different SLO period windows catalogs and defaults You can have multiple Sloth instances with different default windows (with same or different slo period catalog) so you can have different behavior depending on the SLOs. For example in Kubernetes you can run Sloth using label selectors to include/exclude SLOs that will process. E.g: --label-selector=slo-window=7d --label-selector=slo-window!=7d --label-selector=environment=prod,tenant=5","title":"Custom SLO period catalog"},{"location":"usage/slo-period-windows/#selecting-default-slo-period","text":"Kubernetes and raw specs can's select an SLO period using the spec (because of simplicity), so, sloths fallbacks to its default slo period ( 30d ). However, this can be changed using --default-slo-period . Some examples: Use default catalog and default 30 day (this would be the same as not specifying anything): --default-slo-period=30d . Use default catalog with 28 day: --default-slo-period=28d . Use custom catalog with 7 day: --default-slo-period=7d --slo-period-windows-path=/my/custom/slo/catalog . Use custom catalog with 45 day: --default-slo-period=45d --slo-period-windows-path=/my/custom/slo/catalog .","title":"Selecting default SLO period"},{"location":"usage/slo-validation/","text":"Sloth validates the spec on generation, however, on specific steps of the SLO generation process, we only want to validate a group of SLOs. For this purpose Sloth comes with a helpful command called validate . It will discover all the specs recursively and apply the same generation process as generate (including plugins, options...) but discarding the result. Example that validates all SLOs in a directory (including subdirectories) and excludes all in spec files that match _gen in the spec path. Example $ sloth validate --input ./examples --sli-plugins-path ./examples/plugins --fs-exclude _gen INFO [ 0000 ] SLI plugins loaded plugins = 1 version = dev INFO [ 0000 ] Validation succeeded slo-specs = 13 version = dev This command is very helpful on Gitops and CI pipelines to have a fast feedback loop, independently of the process you are using for generating the SLOs (Kubernetes controller or CLI).","title":"SLO Validation"}]}